"use strict";
function _typeof(t) {
    return (_typeof =
        "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
            ? function (t) {
                  return typeof t;
              }
            : function (t) {
                  return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
              })(t);
}
var checkNum = [],
    sEduT = sEduT || {};
(sEduT.util = {
    isTouch: "ontouchstart" in document.documentElement,
    isMobile: function () {
        var t = !1;
        return "android" === sEduT.util.getDevice() && (t = !0), "ios" === sEduT.util.getDevice() && (t = !0), t;
    },
    getDevice: function () {
        var t,
            e = navigator.userAgent.toLowerCase(),
            a = sEduT.util.getEl("#wrap");
        return (
            a.setAttribute("data-browser-type", ""),
            /(?=.*chrome)^(?!.*edg)^(?!.*android)/.test(e)
                ? ((t = "chrome"), (a.dataset.browserType = "chrome"))
                : /firefox/.test(e)
                ? ((t = "firefox"), (a.dataset.browserType = "firefox"))
                : /edg/.test(e)
                ? ((t = "edge"), (a.dataset.browserType = "edge"))
                : /trident/.test(e)
                ? ((t = "ie"), (a.dataset.browserType = "ie"))
                : /android/.test(e)
                ? ((t = "android"), (a.dataset.browserType = "android"))
                : /iphone|ipad|ipod/.test(e)
                ? ((t = "ios"), (a.dataset.browserType = "ios"))
                : ((t = "etc"), (a.dataset.browserType = "etc")),
            (/iPad|iPhone|iPod/.test(navigator.platform) || ("MacIntel" === navigator.platform && 1 < navigator.maxTouchPoints)) && !window.MSStream && ((t = "ios"), (a.dataset.browserType = "ios")),
            t
        );
    },
    getEvt: function (t) {
        var e = sEduT.util.isMobile();
        return "down" === t
            ? e
                ? "touchstart"
                : "mousedown"
            : "up" === t
            ? e
                ? "touchend"
                : "mouseup"
            : "move" === t
            ? e
                ? "touchmove"
                : "mousemove"
            : "enter" === t
            ? e
                ? "touchstart"
                : "mouseenter"
            : "leave" === t
            ? e
                ? "touchcancel"
                : "mouseleave"
            : t;
    },
    getEl: function (t, e) {
        return t.includes("#") ? document.getElementById(t.slice(1)) : (e || document).querySelectorAll(t);
    },
    createEl: function (t, e, a) {
        var i,
            n = document.createElement(t);
        for (i in e) e[i] && n.setAttribute(i, e[i]);
        return a && a.append(n), n;
    },
    addCls: function (t, e) {
        if (t)
            for (var a = t.length, i = e.split(" "), n = i.length, s = 0; s < n; s++) {
                var o = i[s];
                if (a) for (var r = 0; r < a; r++) t[r].classList.add(o);
                else if (!NodeList.prototype.isPrototypeOf(t) && (t.classList.add(o), n <= 1)) return t;
            }
    },
    removeCls: function (t, e) {
        if (t)
            for (var a = t.length, i = e.split(" "), n = i.length, s = 0; s < n; s++) {
                var o = i[s];
                if (a) for (var r = 0; r < a; r++) t[r].classList.remove(o);
                else if (!NodeList.prototype.isPrototypeOf(t) && (t.classList.remove(o), n <= 1)) return t;
            }
    },
    hasCls: function (t, e) {
        if (t) return t.classList.contains(e);
    },
    addEvt: function (t, e, a, i) {
        var n = sEduT.util.getEvt(e);
        if (t)
            if (t.length) for (var s = t.length, o = 0; o < s; o++) t[o].addEventListener(n, a, i);
            else t instanceof NodeList || t.addEventListener(n, a, i);
    },
    removeEvt: function (t, e, a, i) {
        var n = sEduT.util.getEvt(e);
        if (t)
            if (t.length) for (var s = t.length, o = 0; o < s; o++) t[o].removeEventListener(n, a, i);
            else t.removeEventListener(n, a, i);
    },
    getIdx: function (t, e) {
        return t ? (e ? [].indexOf.call(t, e) : [].indexOf.call(t.parentNode.children, t)) : -1;
    },
    getRandomNumber: function (t) {
        var e = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0;
        return Math.floor(Math.random() * t) + e;
    },
    getText: function (t) {
        return t.replace(/[\{\}\[\]\?.,;:|\)*~`!^\-_+<>@\#$%&\\\=\(\'\"\s]/gi, "");
    },
    getFileName: function () {
        return window.location.href.split("/").slice(-3);
    },
    getFileNum: function () {
        return this.getFileName()
            .slice(-1)[0]
            .split("?")[0]
            .replace(/[^0-9]/g, "");
    },
    getURL: function () {
        var i = {};
        return (
            window.location.search.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (t, e, a) {
                i[e] = a;
            }),
            i
        );
    },
    isNum: function (t) {
        return t < 10 ? "0" + t : t.toString();
    },
    isInViewport: function (t) {
        t = t.getBoundingClientRect();
        return 0 <= t.top && 0 <= t.left && t.bottom <= (window.innerHeight || document.documentElement.clientHeight) && t.right <= (window.innerWidth || document.documentElement.clientWidth);
    },
    isInDisplay: function (t) {
        var e = t.getBoundingClientRect(),
            t = !0;
        return 0 === e.width && 0 === e.height && (t = !1), t;
    },
    setStyle: function (t, e) {
        for (var a in e) t.style[a] = e[a];
    },
    getStyle: function (t) {
        return window.getComputedStyle(t);
    },
    createAudio: function (t) {
        var e = new Audio();
        return (e.src = t), e.load(), e;
    },
    loadJSON: function (t, e) {
        var a = new XMLHttpRequest();
        a.overrideMimeType("application/json"),
            a.open("GET", t, !0),
            (a.onreadystatechange = function () {
                4 === a.readyState && "200" == a.status && e(a.responseText);
            }),
            a.send(null);
    },
}),
    (sEduT.ui = (function () {
        var o = sEduT.util;
        return {
            initPageNum: function () {
                o.getFileName();
                var t = o.getFileNum(),
                    e = parseInt(t) % 2,
                    a = o.getEl("#wrap"),
                    i = o.getEl(".page_container", a);
                t &&
                    (((0 !== i.length ? o.getEl(".page_num", i[0])[0] : ((i = o.createEl("footer", { class: "page_container" }, a)), o.createEl("div", { class: "page_num" }, i))).innerText = parseInt(t)),
                    0 == e ? (o.addCls(a, "type_left"), o.addCls(i, "left")) : (o.addCls(a, "type_right"), o.addCls(i, "right")),
                    (a.dataset.infoPage = parseInt(t) || 0));
            },
            createAssist: function () {
                0 < (t = o.getEl("[data-guide-txt]")).length &&
                    t.forEach(function (t) {
                        var e = t.dataset.guideTxt,
                            a = t.dataset.guideCls || "toast up guide",
                            i = o.createEl("button", { type: "button", title: "안내" }, t),
                            n = o.createEl("div", { "data-layout-type": "popup" }, t),
                            s = o.createEl("div", {}, n),
                            t = o.createEl("p", {}, s);
                        o.addCls(n, a), o.addCls(s, "inner"), o.addCls(i, "btn guide"), (i.dataset.popup = "next"), (i.innerText = "클릭"), (t.innerText = e);
                    }),
                    0 < (t = o.getEl(".toast")).length &&
                        t.forEach(function (t) {
                            0 === o.getEl(".tail", t).length && o.createEl("div", { class: "tail" }, t);
                        }),
                    0 < (t = o.getEl("[data-layout-type='popup']")).length &&
                        t.forEach(function (t) {
                            0 === o.getEl("[data-popup-btn='close']", t).length && o.createEl("button", { type: "button", class: "btn close", "data-popup-btn": "close", title: "닫기" }, t),
                                o.getEl("[data-layout-type='popup']", t).forEach(function (t) {
                                    t.setAttribute("data-overlay", "false");
                                });
                        }),
                    0 < (t = o.getEl("[data-create-hide]")).length &&
                        t.forEach(function (t, e) {
                            var a = t.innerText,
                                i = t.dataset.createHide;
                            t.innerText = "";
                            t = o.createEl("span", { class: "btn " + i, "data-show-idx": e + 1 }, t);
                            o.createEl("span", { class: "answer", "data-show-obj": e + 1 }, t).innerText = a;
                        });
                var t,
                    i = 0;
                0 < (t = o.getEl(".box.input.auto")).length &&
                    t.forEach(function (t) {
                        var e,
                            a = o.getEl(".quiz--input", t)[0];
                        a.nextElementSibling && (e = a.nextElementSibling),
                            e && e.dataset.quizAnswer && (i = o.getText(e.textContent).split("//")[0].length),
                            o.hasCls(a, "spelling") ? (t.style.width = 28 * i + "px" || "28px") : e && "" === t.style.width && !o.hasCls(t, "fix") && (t.style.width = 20 * i + "px");
                    }),
                    0 < (t = o.getEl("assessmentItem")).length &&
                        t.forEach(function (e) {
                            var t = o.getEl("[data-quiz-type]", e)[0];
                            e.dataset.qid || e.setAttribute("data-qid", t.dataset.quizId),
                                e.dataset.responseType ||
                                    ("essay" === t.dataset.quizType
                                        ? e.setAttribute("data-response-type", "fillInTheBlank")
                                        : "multiple" === t.dataset.quizType
                                        ? o.getEl("[data-quiz-answer]", t).forEach(function (t) {
                                              -1 !== t.textContent.indexOf("//") ? e.setAttribute("data-response-type", "multipleChoice") : e.setAttribute("data-response-type", "singleChoice");
                                          })
                                        : e.setAttribute("data-response-type", "etc"));
                        }),
                    sEduT.ui.initPageNum();
            },
            checkInputType: function () {
                function e(t) {
                    (t.keyCode < 48 || 57 < t.keyCode) && (t.returnValue = !1);
                }
                o.getEl(".check--number").forEach(function (t) {
                    t.addEventListener("keypress", e),
                        t.addEventListener("keyup", function (t) {
                            this.value = this.value.replace(/[^0-9]/g, "");
                        });
                });
            },
        };
    })()),
    (sEduT.sound = (function () {
        var c = sEduT.util,
            o = {};
        return {
            initAudio: function () {
               
                var e,
                    t = c.getEl("[data-func-audio]");
                c.addEvt(t, "click", function (t) {


                    console.log('this',this);

                    (e = "./media/audio/" + t.currentTarget.dataset.funcAudio + ".mp3"), 
                    o.volatility ? (o.volatility.src = e) : (o.volatility = c.createAudio(e)), 
                    sEduT.sound.playAudio("volatility", this);
                }),
                    c.getEl("[data-func-turnplay]").forEach(function (t) {
                        sEduT.sound.turnAudioPlay(t);
                    });
            },
            turnAudioPlay: function (o) {
                var r,
                    l = c.getEl("[data-turn-idx]", o),
                    d = l.length,
                    t = c.getEl("[data-turn-btn]", o);
                c.addEvt(t, "click", function (t) {
                    console.log(2222222222)
                    function e() {
                        c.getEl(".bubble", l[a]).forEach(function (t) {
                            c.hasCls(t, "bubble--show") ||
                                (c.addCls(t, "animated"),
                                c.addCls(t, "bubble--show"),
                                setTimeout(function () {
                                    c.removeCls(t, "animated");
                                }, 500)),
                                c.hasCls(t, "aniBubble--show") || c.addCls(t, "aniBubble--show");
                        }),
                            c.getEl("[data-func-turnplay]").forEach(function (t) {
                                t.dataset.animateAll
                                    ? 0 == a &&
                                      c.getEl("[data-animate-id]", l[0]).forEach(function (t) {
                                          sEduT.animate.animatePlay(t.dataset.animateId);
                                      })
                                    : c.getEl("[data-animate-id]", l[a]).forEach(function (t) {
                                          sEduT.animate.animatePlay(t.dataset.animateId);
                                      });
                            });
                    }
                    var a, i, n, s;
                    "play" === (s = t.currentTarget).dataset.turnBtn
                        ? (sEduT.sound.stopAllSound(),
                          (a = 0),
                          (r = s.dataset.turnAudio.split("//")),
                          s.dataset.turnDelay && (n = s.dataset.turnDelay),
                          sEduT.complete && sEduT.complete.turnAudio(o, "start", a),
                          l.forEach(function (t, e) {
                              t.dataset.funcAudio = r[e] + ".mp3";
                          }),
                          0 === (i = c.getEl("audio", o)).length ? (i = c.createEl("audio", { src: "./media/audio/" + r[a] + ".mp3", type: "audio/mpeg", preload: "auto" }, o)) : ((i = i[0]).src = "./media/audio/" + r[a] + ".mp3"),
                          (s.dataset.turnBtn = "stop"),
                          c.removeCls(l, "audio--on"),
                          c.addCls(l[a], "audio--on"),
                          c.addCls(s, "on"),
                          c.addCls(o, "turn--play"),
                          i.play(),
                          e(),
                          (i.onended = function () {
                            alert(1);
                              var t;
                              ++a < d
                                  ? ((i.src = "./media/audio/" + r[a] + ".mp3"),
                                    c.removeCls(l[a - 1], "audio--on"),
                                    (t = c.getEl(".bubble", l[a - 1])),
                                    c.removeCls(t, "aniBubble--show"),
                                    o.dataset.animateAll ||
                                        c.getEl("[data-animate-id]", l[a - 1]).forEach(function (t) {
                                            sEduT.animate.animateStop(t.dataset.animateId);
                                        }),
                                    c.addCls(l[a], "audio--on"),
                                    s.dataset.turnDelay
                                        ? setTimeout(function () {
                                              e(), i.play();
                                          }, n)
                                        : (e(), i.play()))
                                  : (c.removeCls(o, "turn--play"),
                                    (t = c.getEl(".bubble", l[a - 1])),
                                    c.removeCls(t, "aniBubble--show"),
                                    o.dataset.animateAll
                                        ? sEduT.animate.stopAllAnimate()
                                        : c.getEl("[data-animate-id]", l[a - 1]).forEach(function (t) {
                                              sEduT.animate.animateStop(t.dataset.animateId);
                                          }),
                                    c.removeCls(s, "on")),
                                  sEduT.complete && sEduT.complete.turnAudio(o, "next", a);
                          }))
                        : "stop" === s.dataset.turnBtn && sEduT.sound.stopAllSound();
                });
            },
            turnAudioStop: function () {
                c.removeCls(c.getEl("[data-func-turnplay]"), "turn--play"),
                    c.getEl("[data-turn-btn]").forEach(function (t) {
                        c.removeCls(t, "on"), (t.dataset.turnBtn = "play");
                    }),
                    c.getEl("[data-func-turnplay]").forEach(function (t) {
                        c.getEl("[data-animate-id]", t).forEach(function (t) {
                            sEduT.animate.animateStop(t.dataset.animateId);
                        });
                    });
            },
            playAudio: function (t, e) {
                var a, i;
                if (e && "object" === _typeof(e) && c.hasCls(e, "audio--on")) return c.removeCls(e, "audio--on"), "string" == typeof t && (o.isPlaying = !1), this.stopAllSound(), void (sEduT.complete && sEduT.complete.sound(e));
                if ((this.stopAllSound(), "string" == typeof t)) {
                    if (o[t]) "ios" === sEduT.util.getDevice() && ((o[n] = ""), (o[n] = c.createAudio(sEduT.isEffectAudio[n] + ".mp3"))), o[t].load();
                    else for (var n in sEduT.isEffectAudio) n === t && (o[n] = c.createAudio(sEduT.isEffectAudio[n] + ".mp3"));
                    (a = o[t]),
                        "object" === _typeof(e) &&
                            (sEduT.animate.stopAllAnimate(),
                            c.addCls(e, "audio--on"),
                            (i = e.dataset.bubbleTarget ? c.getEl("#" + e.dataset.bubbleTarget) : c.hasCls(e.parentNode, "bubble") ? (i = [e.parentNode]) : c.getEl(".bubble", e.parentNode)) &&
                                0 < i.length &&
                                i.forEach(function (t) {
                                    c.hasCls(t, "bubble--show") ||
                                        (c.addCls(t, "animated"),
                                        c.addCls(t, "bubble--show"),
                                        setTimeout(function () {
                                            c.removeCls(t, "animated");
                                        }, 500)),
                                        c.hasCls(t, "aniBubble--show") || c.addCls(t, "aniBubble--show");
                                }),
                            e.dataset.animateTarget
                                ? sEduT.animate.animatePlay(e.dataset.animateTarget)
                                : c.getEl("[data-animate-id]", e).forEach(function (t) {
                                      sEduT.animate.animatePlay(t.dataset.animateId);
                                  }));
                } else c.addCls(t, "audio--on"), (a = 0 === (a = c.getEl("audio", t)).length ? c.createEl("audio", { src: e, type: "audio/mpeg", preload: "auto" }, t) : a[0]);
                a &&
                    (a.play(),
                    "string" == typeof t && (o.isPlaying = t),
                    e && "object" === _typeof(e) && sEduT.complete && sEduT.complete.sound(e),
                    (a.onended = function () {
                        "object" === _typeof(e) &&
                            (c.removeCls(e, "audio--on"),
                            e.dataset.animateTarget
                                ? sEduT.animate.animateStop(e.dataset.animateTarget)
                                : c.getEl("[data-animate-id]", e).forEach(function (t) {
                                      sEduT.animate.animateStop(t.dataset.animateId);
                                  }),
                            i && 0 < i.length && c.addCls(i, "bubble--complete"),
                            c.removeCls(i, "aniBubble--show"),
                            sEduT.complete && sEduT.complete.sound(e)),
                            "string" == typeof t && (o.isPlaying = !1),
                            "string" != typeof t && c.removeCls(t, "audio--on");
                    }));
            },
            stopAllSound: function (t, e) {
                var a,
                    i,
                    n,
                    s = c.getEl(t ? "#" + t : "audio");
                for (s && (a = s.length), n = 0; n < a; n++) (i = s[n]), c.hasCls(i.parentNode, "media--area") || (0 !== i.currentTime && ((i.currentTime = 0), i.pause()));
                for (n in o) "click" !== n && "object" === _typeof(o[n]) && 0 !== o[n].currentTime && (o[n].pause(), (o[n].currentTime = 0));
                if (((o.isPlaying = !1), c.removeCls(c.getEl(".audio--on"), "audio--on"), c.removeCls(c.getEl(".aniBubble--show"), "aniBubble--show"), this.turnAudioStop(), sEduT.animate.stopAllAnimate(), sEduT.mediaPlayer))
                    for (n in sEduT.mediaPlayer) "mediaPlayer" === e ? sEduT.mediaPlayer[n].mediaAllStop(t) : sEduT.mediaPlayer[n].mediaAllStop();
            },
            initMediaPlayer: function (n) {
                function s(t, e, a, i) {
                    (this.container = t),
                        (this.mediaInner = c.getEl(".media--inner", t)[0]),
                        (this.type = e),
                        (this.media = a),
                        (this.mediaId = "mediaPlayer" + c.isNum(i)),
                        (this.btnOnly = !1),
                        (this.isVolume = !0),
                        (this.isCaption = !1),
                        (this.isCaptionOn = !1),
                        (this.isCover = n.cover || !1),
                        (this.isCloseBtn = n.close || !1),
                        (this.fullscreenMode = n.fullScreenMode || "native"),
                        (this.autoPlay = !1),
                        (this.isPlay = !1),
                        Object.defineProperties(this, {
                            duration: {
                                get: function () {
                                    return this.media.duration;
                                },
                            },
                            durationText: {
                                get: function () {
                                    return c.isNum(Math.floor(this.duration / 60)) + ":" + c.isNum(Math.floor(this.duration % 60));
                                },
                            },
                            playTime: {
                                get: function () {
                                    return this.media.currentTime;
                                },
                                set: function (t) {
                                    this.media.currentTime = t;
                                },
                            },
                            currentText: {
                                get: function () {
                                    return c.isNum(Math.floor(this.playTime / 60)) + ":" + c.isNum(Math.floor(this.playTime % 60));
                                },
                            },
                            timeRate: {
                                get: function () {
                                    return this.playTime / this.duration;
                                },
                            },
                            barSize: {
                                get: function () {
                                    return this.barRail.getBoundingClientRect();
                                },
                            },
                            barWidth: {
                                get: function () {
                                    return this.barSize.right - this.barSize.left;
                                },
                            },
                            volume: {
                                get: function () {
                                    return this.media.volume;
                                },
                                set: function (t) {
                                    this.media.volume = t;
                                },
                            },
                            volumeSize: {
                                get: function () {
                                    return this.isVolume && this.volumeRail.getBoundingClientRect();
                                },
                            },
                            volumeWidth: {
                                get: function () {
                                    return this.isVolume && this.volumeSize.right - this.volumeSize.left;
                                },
                            },
                            coord: {
                                get: function () {
                                    return this.coordX, this.coordY;
                                },
                                set: function (t) {
                                    (this.coordX = (t.touches ? t.touches[0] : t).clientX), (this.coordY = (t.touches ? t.touches[0] : t).clientY);
                                },
                            },
                            isFullscreen: {
                                get: function () {
                                    return document.fullscreenElement || document.msFullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement;
                                },
                            },
                        });
                }
                (s.prototype = {
                    init: function () {
                        c.hasCls(this.container, "only") && (this.btnOnly = !0),
                            c.hasCls(this.container, "is--caption") && (this.isCaption = !0),
                            (this.isVolume = !0),
                            c.isTouch && (this.isVolume = !1),
                            sEduT.isDTBOOK && (this.isVolume = !1),
                            "video" === this.type && (this.isVolume = !0),
                            "audio" === this.type && (this.isVolume = !0),
                            this.create(),
                            (this.container.dataset.mediaId = this.mediaId),
                            (this.btns = c.getEl(".btn", this.container)),
                            "audio" === this.type && c.addCls(c.getEl(".progress--bar", this.container), "hide"),
                            this.addEvt(),
                            this.mediaReady();
                    },
                    create: function () {
                        return (
                            (this.control = c.createEl("div", { class: "media--controller" }, this.mediaInner)),
                            (this.playBtn = c.createEl("div", { class: "btn play", title: "재생" }, this.control)),
                            (this.pauseBtn = c.createEl("div", { class: "btn pause", title: "일시 정지" }, this.control)),
                            (this.stopBtn = c.createEl("div", { class: "btn stop", title: "정지" }, this.control)),
                            this.btnOnly ||
                                ((this.controlBar = c.createEl("div", { class: "progress--bar" }, this.control)),
                                (this.barRail = c.createEl("div", { class: "progress rail" }, this.controlBar)),
                                (this.barActive = c.createEl("div", { class: "progress current" }, this.controlBar)),
                                (this.barHandler = c.createEl("div", { class: "progress handle" }, this.controlBar)),
                                (this.controlTime = c.createEl("div", { class: "time--text" }, this.control)),
                                (this.current = c.createEl("div", { class: "time current" }, this.controlTime)),
                                (this.total = c.createEl("div", { class: "time total" }, this.controlTime))),
                            !this.btnOnly &&
                                this.isVolume &&
                                ((this.muteBtn = c.createEl("div", { class: "btn mute", title: "음소거" }, this.control)),
                                (this.volumeBar = c.createEl("div", { class: "volume--bar" }, this.control)),
                                (this.volumeRail = c.createEl("div", { class: "volume rail" }, this.volumeBar)),
                                (this.volumeActive = c.createEl("div", { class: "volume current" }, this.volumeBar)),
                                (this.volumeHandler = c.createEl("div", { class: "volume handle" }, this.volumeBar))),
                            "video" === this.type &&
                                this.isCover &&
                                ((this.thumbContainer = c.createEl("div", { class: "thumb--area" }, this.mediaInner)),
                                (this.coverImg = c.createEl("div", { class: "img cover" }, this.thumbContainer)),
                                (this.coverBtn = c.createEl("div", { class: "btn play" }, this.thumbContainer))),
                            "video" === this.type &&
                                this.isCaption &&
                                ((this.captionBtn = c.createEl("div", { class: "btn caption", title: "자막" }, this.control)),
                                (this.captionContainer = c.createEl("div", { class: "caption--area script" }, this.mediaInner)),
                                (this.captionTxt = c.createEl("p", { class: "txt" }, this.captionContainer))),
                            "video" === this.type && (this.fullScreenBtn = c.createEl("div", { class: "btn fullScreen", title: "전체 화면" }, this.control)),
                            "video" === this.type && this.isCloseBtn && (this.closeBtn = c.createEl("div", { class: "btn close", title: "닫기" }, this.container)),
                            this
                        );
                    },
                    addEvt: function () {
                        var t = this;
                        c.addEvt(this.container, "down", this.mediaLoad.bind(this), { capture: !0 }),
                            c.addEvt(this.playBtn, "click", this.mediaPlay.bind(this), { capture: !0 }),
                            c.addEvt(this.pauseBtn, "click", this.mediaPause.bind(this), { capture: !0 }),
                            c.addEvt(this.stopBtn, "click", this.mediaStop.bind(this), { capture: !0 }),
                            this.btnOnly ||
                                (c.addEvt(this.barRail, "click", this.clickBarHandle.bind(this), { capture: !0 }),
                                c.addEvt(this.barActive, "click", this.clickBarHandle.bind(this)),
                                c.addEvt(this.barHandler, "down", this.dragBarHandle.bind(this), { capture: !0 }),
                                this.isVolume &&
                                    (c.addEvt(this.muteBtn, "click", this.mediaMute.bind(this), { capture: !0 }),
                                    c.addEvt(this.volumeRail, "click", this.clickBarHandle.bind(this), { capture: !0 }),
                                    c.addEvt(this.volumeActive, "click", this.clickBarHandle.bind(this), { capture: !0 }),
                                    c.addEvt(this.volumeHandler, "down", this.dragBarHandle.bind(this), { capture: !0 }))),
                            "video" === this.type &&
                                (c.addEvt(this.fullScreenBtn, "click", this.mediaFullScreen.bind(this), { capture: !0 }),
                                document.addEventListener("fullscreenchange", this.fullScreenHandler.bind(this)),
                                document.addEventListener("webkitfullscreenchange", this.fullScreenHandler.bind(this)),
                                document.addEventListener("mozfullscreenchange", this.fullScreenHandler.bind(this)),
                                document.addEventListener("MSFullscreenChange", this.fullScreenHandler.bind(this)),
                                this.isCover && c.addEvt(this.coverBtn, "click", this.mediaPlay.bind(this), { capture: !0 })),
                            this.media.addEventListener("play", function () {
                                (t.isPlay = !0),
                                    t.isBtnState("play"),
                                    t.isPlaying(),
                                    "audio" === t.type && t.setVolum(0.5),
                                    "audio" === t.type && t.updateVolumBar(),
                                    "video" === t.type && t.media.readyState && c.addCls(t.thumbContainer, "hide");
                            }),
                            this.media.addEventListener("pause", function () {
                                (t.isPlay = !1), t.isBtnState("pause"), c.removeCls(t.container, "is--playing"), clearInterval(this.mediaUpdate);
                            }),
                            this.media.addEventListener("ended", function () {
                                (t.isPlay = !1), t.mediaStop(), "video" === t.type && c.removeCls(t.thumbContainer, "hide");
                            });
                    },
                    mediaLoad: function () {
                        this.media.readyState || (this.media.load(), this.media.play(), this.media.pause());
                    },
                    mediaReady: function () {
                        var t,
                            e = this;
                        "video" === e.type && e.isCover && ((t = e.media.getAttribute("poster")), (e.coverImg.style.backgroundImage = "url(" + t + ")")),
                            c.addCls(e.playBtn, "off"),
                            c.addCls(e.pauseBtn, "on"),
                            c.addCls(e.pauseBtn, "on"),
                            e.media.readyState || (e.controlTime.style.opacity = "0");
                        var a = setInterval(function () {
                            e.media.readyState &&
                                (clearInterval(a),
                                (e.controlTime.style.opacity = "1"),
                                (e.mediaDuration = e.media.duration),
                                e.btnOnly || ((e.total.innerText = e.durationText), e.updateTimer()),
                                !this.btnOnly && this.isVolume && e.updateVolumBar(),
                                e.isCaption && (e.getCaptionData(), sEduT.sound.initMediaCaption(e)),
                                e.reservationPlaying && (e.mediaPlay(), (e.reservationPlaying = !1)));
                        });
                    },
                    mediaPlay: function () {
                        sEduT.sound.stopAllSound(this.mediaId, "mediaPlayer"), this.media.readyState ? ((this.media.currentTime = this.playTime), this.media.play()) : (this.reservationPlaying = !0);
                    },
                    mediaPause: function () {
                        this.media.pause();
                    },
                    mediaStop: function () {
                        this.mediaDuration && (this.media.pause(), this.changeTime(0), "video" === this.type && c.removeCls(this.thumbContainer, "hide"));
                    },
                    isPlaying: function () {
                        var t = this;
                        c.addCls(this.container, "is--playing"),
                            (t.mediaUpdate = setInterval(
                                function () {
                                    t.btnOnly || t.updateTimer(), t.btnOnly || t.updateBar();
                                }.bind(this),
                                100
                            ));
                    },
                    isBtnState: function (t) {
                        "play" === t
                            ? (c.addCls(this.playBtn, "on"), c.addCls(this.pauseBtn, "off"), c.removeCls(this.playBtn, "off"), c.removeCls(this.pauseBtn, "on"))
                            : (c.removeCls(this.playBtn, "on"), c.removeCls(this.pauseBtn, "off"), c.addCls(this.playBtn, "off"), c.addCls(this.pauseBtn, "on"));
                    },
                    clickBarHandle: function (t, e) {
                        var a, i, n, s, o;
                        this.mediaDuration
                            ? ((a = (this.coord = t).currentTarget ? t.currentTarget.className.split(" ")[0] : e),
                              (i = this.getBarValue(this.coordX, a)),
                              "progress" === a ? (this.changeTime(i), this.isCaption && this.isCaptionOn && this.captionFs.getCaptionTxt()) : "volume" === a && (this.setVolum(i), this.updateVolumBar()))
                            : ((n = this),
                              (e = t.currentTarget.className.split(" ")[0]),
                              (s = t),
                              (o = setInterval(function () {
                                  n.mediaDuration && (clearInterval(o), n.clickBarHandle(s, e));
                              })));
                    },
                    dragBarHandle: function (t, e) {
                        var a, i, n, s, o;
                        this.mediaDuration
                            ? ((a = function (t) {
                                  var e, a;
                                  (this.coord = t),
                                      "progress" === i
                                          ? ((e = this.coordX - this.barSize.left), (a = this.getBarValue(this.coordX, i)), this.changeTime(a), this.isCaption && this.isCaptionOn && this.captionFs.getCaptionTxt())
                                          : "volume" === i && ((e = this.coordX - this.volumeSize.left), (a = this.getBarValue(this.coordX, i)), this.setVolum(a));
                                  0 < e &&
                                      ("progress" === i ? e > this.barWidth && (e = this.barWidth) : "volume" === i && e > this.volumeWidth && (e = this.volumeWidth),
                                      this.isFullscreen || (e /= sEduT.scaleValue.zoom),
                                      (function (t) {
                                          "progress" === i
                                              ? ((n.barHandler.style.left = t + "px"), (n.barActive.style.width = t + "px"))
                                              : "volume" === i && ((n.volumeHandler.style.left = t + "px"), (n.volumeActive.style.width = t + "px"));
                                      })(e));
                              }.bind((n = this))),
                              (i = t.currentTarget ? t.currentTarget.className.split(" ")[0] : e),
                              t.preventDefault(),
                              c.addEvt(document, "move", a),
                              c.addEvt(document, "up", function () {
                                  c.removeEvt(document, "move", a);
                              }),
                              sEduT.view.senseClosePopupEvent(t))
                            : ((n = this),
                              (e = t.currentTarget.className.split(" ")[0]),
                              (s = t),
                              (o = setInterval(function () {
                                  n.mediaDuration && (clearInterval(o), n.dragBarHandle(s, e));
                              })));
                    },
                    getBarValue: function (t, e) {
                        return "progress" === e ? (t - this.barSize.left) / this.barWidth : "volume" === e ? parseFloat((t - this.volumeSize.left) / this.volumeWidth).toFixed(1) : void 0;
                    },
                    changeTime: function (t) {
                        var e = t * this.mediaDuration;
                        e < 0 && (e = 0),
                            e > this.mediaDuration && (t = 1),
                            (this.playTime = t * this.mediaDuration - 0.01),
                            this.btnOnly || this.updateTimer(),
                            this.btnOnly || this.updateBar(),
                            "video" === this.type && c.addCls(this.thumbContainer, "hide");
                    },
                    updateTimer: function () {
                        this.current.innerText = this.currentText;
                    },
                    updateBar: function () {
                        var t = this.isFullscreen ? this.barWidth * this.timeRate : (this.barWidth / sEduT.scaleValue.zoom) * this.timeRate;
                        (this.barHandler.style.left = t + "px"), (this.barActive.style.width = t + "px");
                    },
                    updateVolumBar: function () {
                        var t = this.isFullscreen ? this.volumeWidth * this.media.volume : (this.volumeWidth / sEduT.scaleValue.zoom) * this.media.volume;
                        (this.volumeHandler.style.left = t + "px"), (this.volumeActive.style.width = t + "px");
                    },
                    setVolum: function (t) {
                        (this.media.muted = !0), t <= 0 ? ((t = 0), (this.media.muted = !1)) : 1 <= t && (t = 1), (this.volume = t), this.mediaMute();
                    },
                    mediaMute: function () {
                        this.media.muted ? ((this.media.muted = !1), c.removeCls(this.muteBtn, "on")) : ((this.media.muted = !0), c.addCls(this.muteBtn, "on"));
                    },
                    mediaFullScreen: function () {
                        if ("ios" === c.getDevice()) return c.addCls(this.container, "is--controls"), void this.media.webkitEnterFullScreen();
                        var t;
                        this.isFullscreen
                            ? document.exitFullscreen
                                ? document.exitFullscreen()
                                : document.msExitFullscreen
                                ? document.msExitFullscreen()
                                : document.mozCancelFullScreen
                                ? document.mozCancelFullScreen()
                                : document.webkitExitFullscreen && document.webkitExitFullscreen()
                            : (t = this).media.readyState
                            ? ((this.videoWidth = this.media.offsetWidth + "px"),
                              (this.videoHeight = this.media.offsetHeight + "px"),
                              this.container.requestFullscreen
                                  ? this.container.requestFullscreen()
                                  : this.container.msRequestFullscreen
                                  ? this.container.msRequestFullscreen()
                                  : this.container.mozRequestFullScreen
                                  ? this.container.mozRequestFullScreen()
                                  : this.container.webkitRequestFullscreen && this.container.webkitRequestFullscreen())
                            : setTimeout(function () {
                                  t.mediaFullScreen();
                              }, 100);
                    },
                    fullScreenHandler: function () {
                        this.media.readyState &&
                            (this.isFullscreen
                                ? (c.addCls(this.container, "is--fullscreen"), c.addCls(this.fullScreenBtn, "on"), this.resizeInner())
                                : (c.removeCls(this.container, "is--controls"),
                                  c.removeCls(this.container, "is--fullscreen"),
                                  c.removeCls(this.fullScreenBtn, "on"),
                                  (this.media.style.width = null),
                                  (this.media.style.height = null),
                                  (this.thumbContainer.style.width = null),
                                  (this.thumbContainer.style.height = null),
                                  (this.captionContainer.style.marginBottom = null),
                                  clearInterval(this.positionInterval)),
                            this.updateBar());
                    },
                    resizeInner: function () {
                        var t = this;
                        function e() {
                            window.innerHeight <= t.mediaInner.clientHeight + t.control.offsetHeight
                                ? ((t.media.style.height = "calc(100% - " + t.control.offsetHeight + "px)"),
                                  (t.thumbContainer.style.height = "calc(100% - " + t.control.offsetHeight + "px)"),
                                  (t.control.style.bottom = "0px"),
                                  (t.captionContainer.style.marginBottom = t.control.offsetHeight + "px"))
                                : ((t.control.style.bottom = "-" + t.control.offsetHeight + "px"), (t.captionContainer.style.marginBottom = "0px"));
                        }
                        setTimeout(function () {
                            (t.media.style.width = "100%"), (t.media.style.height = "auto"), (t.thumbContainer.style.width = "100%"), (t.thumbContainer.style.height = "100%"), e();
                        }, 50),
                            (t.positionInterval = setInterval(function () {
                                e();
                            }, 500));
                    },
                    getCaptionData: function () {
                        var t,
                            e = window.sEduT_CAPTION,
                            a = this.media.currentSrc.split("/").slice(-1)[0].split(".")[0];
                        for (t in e) t === a && (this.CAPTION_DATA = e[t]);
                    },
                    mediaAllStop: function (t) {
                        t ? t !== this.mediaId && this.media.readyState && this.mediaStop() : this.media.readyState && this.mediaStop();
                    },
                }),
                    c.getEl("[data-media-control]").forEach(function (t, e) {
                        var a = t.dataset.mediaControl,
                            i = c.getEl("audio, video", t)[0];
                        (sEduT.mediaPlayer[e] = new s(t, a, i, e + 1)), sEduT.mediaPlayer[e].init();
                    });
            },
            initMediaCaption: function (e) {
                e.captionCurIdx,
                    e.captionOldIdx,
                    e.syncUpdate,
                    (e.captionFs = {
                        captionUpdate: function () {
                            e.syncUpdate = setInterval(function () {
                                e.isPlay && e.captionFs.getCaptionTxt();
                            }, 500);
                        },
                        getCaptionTxt: function () {
                            e.captionFs.getIdx(),
                                e.captionCurIdx
                                    ? (e.captionOldIdx === e.captionCurIdx && "" !== e.captionTxt.textContent) ||
                                      ((e.captionOldIdx = e.captionCurIdx), (e.captionTextOn = !0), c.addCls(e.captionTxt, "on"), (e.captionTxt.innerHTML = e.CAPTION_DATA[e.captionCurIdx].text))
                                    : e.captionTextOn && ((e.captionTextOn = !1), c.removeCls(e.captionTxt, "on"), (e.captionTxt.textContent = ""));
                        },
                        getIdx: function () {
                            for (var t in ((e.captionCurIdx = null), e.CAPTION_DATA))
                                if (e.playTime >= e.captionFs.getTime(e.CAPTION_DATA[t].startTime) && e.playTime <= e.captionFs.getTime(e.CAPTION_DATA[t].endTime)) {
                                    if (e.captionOldIdx === e.captionCurIdx) break;
                                    e.captionCurIdx = t;
                                    break;
                                }
                        },
                        getTime: function (t) {
                            return 60 * parseFloat(t.split(":")[0]) + parseFloat(t.split(":")[1]);
                        },
                    }),
                    c.addEvt(e.captionBtn, "click", function () {
                        e.isCaptionOn
                            ? ((e.isCaptionOn = !1), c.removeCls(e.captionBtn, "on"), c.removeCls(e.captionContainer, "caption--show"), clearInterval(e.syncUpdate))
                            : ((e.isCaptionOn = !0), c.addCls(e.captionBtn, "on"), c.addCls(e.captionContainer, "caption--show"), e.captionFs.getCaptionTxt(), e.captionFs.captionUpdate());
                    });
            },
        };
    })()),
    (sEduT.dragUtil = {
        setPluralValue: function (t, e) {
            t.correctAnswer && ((t.pluralArea = this.getPluralArea(t.correctAnswer)), (t.pluralDrag = this.getPluralSelect(t.correctAnswer, e)));
        },
        getPluralArea: function (t) {
            var e = !1;
            return (
                t.forEach(function (t) {
                    1 < t.length && (e = !0);
                }),
                e
            );
        },
        getPluralSelect: function (e, t) {
            var a = !1;
            return (
                t.forEach(function (t) {
                    1 < sEduT.dragUtil.getPluralCorrect(e, t.dataset.num) && (a = !0);
                }),
                a
            );
        },
        getPluralCorrect: function (t, e) {
            for (var a = t.join(""), i = -1, n = 0; -1 != (i = a.indexOf(e, i + 1)) && n++, -1 != i; );
            return n;
        },
        selectHasDone: function (t) {
            (t.isHasValue = this.hasDone(t.userValue, t.doneNum, t.thisNum)), (t.isHasAnswer = this.hasDone(t.correctAnswer, t.doneNum, t.thisNum));
        },
        hasDone: function (t, e, a) {
            if (t[e]) return t[e].includes(a);
        },
        setSelectItems: function (t, e) {
            (e.thisSelect = t.currentTarget), (e.thisNum = parseInt(e.thisSelect.dataset.num)), e.thisSelect.dataset.pointerGrop && (e.gropName = e.thisSelect.dataset.pointerGrop);
        },
        directCheckResult: function (t) {
            t.userValue[t.doneNum].push(t.thisNum), this.checkPluralDone(t), this.directShowResult(t);
        },
        checkPluralDone: function (t) {
            var e = this.getPluralCorrect(t.userValue, t.thisNum);
            sEduT.util.hasCls(t.container, "activityCard") && ((5 != t.correctPlural && 2 != t.correctPlural) || (t.correctPlural = 1), 0 != e && (e = 1)),
                e === t.correctPlural && ("drag" === t.type && sEduT.util.addCls(t.thisSelect, "drag--done"), "draw" === t.type && sEduT.util.addCls(t.thisSelect, "draw--done")),
                t.userValue[t.doneNum].length === t.correctAnswer[t.doneNum].length &&
                    ("drag" === t.type && sEduT.util.addCls(t.dropItems[t.doneNum], "drop--done"), "draw" === t.type && sEduT.util.addCls(t.endItems[t.doneNum], "line--done"));
        },
        directShowResult: function (t) {
            JSON.stringify(t.userValue) === JSON.stringify(t.correctAnswer) ? ((t.score = !0), sEduT.quiz.resultQuiz(t.qid)) : (t.score = !1);
        },
        addClsDone: function (t) {
            t.userValue[t.doneNum].push(t.thisNum),
                t.pluralArea || t.pluralDrag || this.checkPluralDone(t),
                t.pluralDrag || ("drag" === t.type && sEduT.util.addCls(t.dropItems[t.doneNum], "drop--done"), "draw" === t.type && sEduT.util.addCls(t.endItems[t.doneNum], "line--done"));
        },
        getDoneElement: function (t, e) {
            var a;
            (e.doneEl = t.target),
                (e.doneNum = null),
                (e.isSuccess = !1),
                ("drag" !== e.doneEl.dataset.quizPointer && "start" !== e.doneEl.dataset.quizPointer) || ((a = e.doneEl).style.zIndex = 0),
                sEduT.util.isTouch ? (e.doneEl = document.elementFromPoint(t.changedTouches[0].clientX, t.changedTouches[0].clientY)) : (e.doneEl = document.elementFromPoint(t.clientX, t.clientY)),
                a && (a.style.zIndex = null),
                "drag" === e.type || ("draw" === e.type && "end" === e.doneEl.dataset.quizPointer && (e.doneNum = parseInt(e.doneEl.dataset.num) - 1));
        },
        isGropName: function (t) {
            t.gropName && t.gropName !== t.doneEl.dataset.pointerGrop && (t.isSuccess = !1);
        },
        saveSendComplete: function (t) {
            "drag" === t.type ? sEduT.complete && sEduT.complete.dragDrop(t.container, t.thisNum, t.doneNum) : "draw" === t.type && sEduT.complete && sEduT.complete.drawLine(t.container, t.thisNum, t.doneNum),
                sEduT.isDTBOOK && sEduT.quizDtBook && sEduT.quizDtBook.dtSaveQuizData(t.qid);
        },
        getCoord: function (t, e) {
            return (e.coord = { left: (t.touches ? t.touches[0] : t).clientX, top: (t.touches ? t.touches[0] : t).clientY }), e;
        },
        setDragPosition: function (t, e) {
            $(".popup.summary").hasClass("pop--open")
                ? ($(t).parents(".popup.summary").find("[data-quiz-type=drag].quiz_area").outerWidth(), $(t).parents(".popup.summary").find("[data-quiz-type=drag].quiz_area").outerHeight())
                : ($("[data-quiz-type=drag].quiz_area").outerWidth(), $("[data-quiz-type=drag].quiz_area").outerHeight());
            $(t).outerWidth(), $(t).outerHeight();
            (e.drag.moveLeft = e.coord.left - e.drag.prevLeft - e.dragArea.left),
                (e.drag.moveTop = e.coord.top - e.drag.prevTop - e.dragArea.top),
                (t.style.left = e.drag.moveLeft / sEduT.scaleValue.zoom + "px"),
                (t.style.top = e.drag.moveTop / sEduT.scaleValue.zoom + "px"),
                (t.style.right = "auto"),
                (t.style.auto = "auto");
        },
        setDragPosition2: function (t, e) {
            (e.drag.moveLeft = e.coord.left - e.drag.prevLeft - e.dragArea.left + 43),
                (e.drag.moveTop = e.coord.top - e.drag.prevTop - e.dragArea.top + 43),
                (t.style.left = e.drag.moveLeft / sEduT.scaleValue.zoom + "px"),
                (t.style.top = e.drag.moveTop / sEduT.scaleValue.zoom + "px"),
                (t.style.right = "auto"),
                (t.style.auto = "auto");
        },
        resetDragPosition: function (t) {
            (t.style.left = null), (t.style.top = null), (t.style.right = null), (t.style.auto = null);
        },
        getDragPosition: function (t, e, a) {
            var i = {};
            return (
                t.forEach(function (t) {
                    i[t.dataset.quizArea + "Area"] = t.getBoundingClientRect();
                }),
                (i.drag = e.getBoundingClientRect()),
                a &&
                    a.forEach(function (t, e) {
                        i["drop" + e] = t.getBoundingClientRect();
                    }),
                i
            );
        },
        dragStickTo: function (t, e) {
            return e.drag.left > e["drop" + t].left + e["drop" + t].width || e.drag.left + e.drag.width < e["drop" + t].left || e.drag.top > e["drop" + t].top + e["drop" + t].height || e.drag.top + e.drag.height < e["drop" + t].top;
        },
        cloneDrag: function (t, e) {
            e = e.cloneNode(!0);
            return t.pluralArea || e.classList.add("inline_flex"), e.removeAttribute("data-quiz-pointer"), this.resetDragPosition(e), e;
        },
        getDrawPosition: function (t, e) {
            var a = {};
            return (a.svg = t.getBoundingClientRect()), (a.start = e.getBoundingClientRect()), a;
        },
        drawStartPosition: function (t) {
            return { x: (t.start.left - t.svg.left + t.start.width / 2) / sEduT.scaleValue.zoom, y: (t.start.top - t.svg.top + t.start.height / 2) / sEduT.scaleValue.zoom };
        },
        drawEndPosition: function (t, e, a) {
            var i,
                t = a ? ((i = (a = a.getBoundingClientRect()).left + a.width / 2), a.top + a.height / 2) : ((i = (t.touches ? t.touches[0] : t).clientX), (t.touches ? t.touches[0] : t).clientY);
            return { x: (i - e.svg.left) / sEduT.scaleValue.zoom, y: (t - e.svg.top) / sEduT.scaleValue.zoom };
        },
        drawAnswerPosition: function (t, e) {
            var a = {};
            return (a.svg = t.getBoundingClientRect()), (a.dot = e.getBoundingClientRect()), { x: (a.dot.left - a.svg.left + a.dot.width / 2) / sEduT.scaleValue.zoom, y: (a.dot.top - a.svg.top + a.dot.height / 2) / sEduT.scaleValue.zoom };
        },
        isInLine: function (t, e, a) {
            var t = sEduT.util.getEl(e, t),
                i = !1;
            return (
                t.forEach(function (t) {
                    parseInt(t.getAttribute(e)) === a && (i = !0);
                }),
                i
            );
        },
        createLine: function (t, e, a) {
            var i = document.createElementNS("http://www.w3.org/2000/svg", "line");
            return i.setAttribute("class", e), i.setAttribute("data-start-num", a), t.appendChild(i);
        },
        drawLine: function (t, e, a, i) {
            return t.setAttribute("x1", e.x), t.setAttribute("y1", e.y), t.setAttribute("x2", a.x), t.setAttribute("y2", a.y), i && t.setAttribute("data-end-num", i), t;
        },
        loadDrawData: function (t) {
            var e,
                t = t[0] || t,
                t = sEduT.util.getEl(".is--not--rect", t);
            0 < t.length &&
                t.forEach(function (t) {
                    sEduT.util.isInDisplay(t) && sEduT.util.hasCls(t, "is--not--rect") && ((e = t.dataset.quizId), sEduT.util.removeCls(t, "is--not--rect"), sEduT.quizDtBook.dtLoadData(e));
                });
        },
    }),
    (sEduT.quizData = {
        DATA: {},
        setData: function (t) {
            var e = this.DEFAULT_OPTION,
                a = {};
            switch (
                ((a.container = t),
                (a.qid = t.dataset.quizId),
                (a.type = t.dataset.quizType),
                (a.totalChance = e.totalChance),
                (a.isFeedback = e.feedback),
                (a.isMarking = e.marking),
                (a.isHint = e.hint),
                (a.isEmptyCheck = e.emptyCheck),
                (a.isExample = !1),
                (a.directCheck = !1),
                (a.isOverlap = !0),
                (a.controlShowHide = e.controlShowHide),
                (a.isSendCaliperSensor = !1),
                t.dataset.quizOption &&
                    ((a.option = t.dataset.quizOption.split("//")),
                    a.option.forEach(function (t) {
                        -1 !== t.indexOf("chance:") && (a.totalChance = parseInt(t.replace("chance:", ""))),
                            -1 !== t.indexOf("feedback") && (e.feedback ? (a.isFeedback = !1) : (a.isFeedback = !0)),
                            -1 !== t.indexOf("marking") && (e.marking ? (a.isMarking = !1) : (a.isMarking = !0)),
                            -1 !== t.indexOf("hint") && (e.hint ? (a.isHint = !1) : (a.isHint = !0)),
                            -1 !== t.indexOf("empty") && (e.emptyCheck ? (a.isEmptyCheck = !1) : (a.isEmptyCheck = !0)),
                            -1 !== t.indexOf("ex") && (a.isExample = !0),
                            -1 !== t.indexOf("notover") && (a.isOverlap = !1),
                            -1 !== t.indexOf("direct") && (a.directCheck = !0),
                            -1 !== t.indexOf("toggle") && (a.checkToggle = !0),
                            -1 !== t.indexOf("btn") && (e.controlShowHide ? (a.controlShowHide = !1) : (a.controlShowHide = !0));
                    })),
                (a.correctAnswer = !a.isExample && this.getAnswer(t, a.type)),
                (a.userValue = this.resetUserValue(a.correctAnswer)),
                (a.score = !1),
                (a.chance = 0),
                (a.controlBtns = sEduT.util.getEl("[data-quiz-target='" + t.dataset.quizId + "']") || null),
                a.isExample && this.getExample(a),
                0 < sEduT.util.getEl(".caliper--description", t).length && t.closest("assessmentItem") && ((a.isSendCaliperSensor = !0), (a.description = sEduT.util.getEl(".caliper--description", t)[0].textContent || "평가")),
                a.type)
            ) {
                case "multiple":
                    (a.quizName = sEduT.util.getEl("[data-quiz-name]", a.container)), 0 === a.quizName.length && (a.quizName = [a.container]), (a.selectItems = []);
                    break;
                case "essay":
                    a.essayItems = sEduT.util.getEl(".quiz--input", a.container);
                    break;
                case "draw":
                    (a.svgContainer = sEduT.util.getEl("[data-quiz-area='svg']", a.container)[0]),
                        (a.startItems = sEduT.util.getEl("[data-quiz-pointer='start']", a.container)),
                        (a.endItems = sEduT.util.getEl("[data-quiz-pointer='end']", a.container));
                    break;
                case "drag":
                    console.log(777);
                    (a.dragArea = sEduT.util.getEl("[data-quiz-area]", a.container)),
                        (a.dragArea2 = sEduT.util.getEl(".innerDrag", a.container)),
                        (a.dragItems = sEduT.util.getEl("[data-quiz-pointer='drag']", a.container)),
                        (a.dropItems = sEduT.util.getEl("[data-quiz-pointer='drop']", a.container)),
                        (a.dropLen = a.dropItems.length);
                    break;
                case "layer":
                    (a.layerPopup = sEduT.util.getEl(".layer--select", a.container)[0]),
                        (a.layerSelect = sEduT.util.getEl(".layer--return", a.container)),
                        (a.layerOption = sEduT.util.getEl(".layer--option", a.layerPopup)),
                        a.selectPosition,
                        (a.selectIdx = 0);
            }
            sEduT.isDTBOOK && (("multiple" !== a.type && "draw" !== a.type && "drag" !== a.type) || ((a.isMergeSave = !0), this.createSaveInput(t))), (this.DATA[a.qid] = a);
        },
        getExample: function (t) {
            var e, a, i;
            if (((t.example = []), 0 < (e = sEduT.util.getEl("[data-quiz-feed='example']", t.container)).length)) for (i = 0; i < e.length; i++) t.example.push(e[i]), 0;
            if (0 < t.controlBtns.length)
                for (i = 0; i < t.controlBtns.length; i++)
                    (a = t.controlBtns[i].nextElementSibling) && a.dataset.quizFeed && ((t.controlBtns[i].dataset.popup = "next"), a.classList.add("toast", "example"), (a.dataset.layoutType = "popup"), t.example.push(a)), 0;
        },
        getAnswer: function (t, e) {
            var t = sEduT.util.getEl("[data-quiz-answer]", t),
                a = [];
            return (
                0 < t.length
                    ? t.forEach(function (t) {
                          switch (e) {
                              case "multiple":
                                  a.push(t.textContent.split("//").map(Number));
                                  break;
                              case "essay":
                                  a.push(sEduT.util.getText(t.textContent).split("//"));
                                  break;
                              default:
                                  t.textContent.split("//").forEach(function (t, e) {
                                      a[e] = t.split(",").map(Number);
                                  });
                          }
                      })
                    : (a = !1),
                a
            );
        },
        resetUserData: function (t) {
            t = this.DATA[t];
            (t.userValue = this.resetUserValue(t.userValue)), (t.score = !1), (t.chance = 0);
        },
        resetUserValue: function (t) {
            var a = [];
            return (
                t &&
                    t.forEach(function (t, e) {
                        a[e] = [];
                    }),
                a
            );
        },
        getCaliperUser: function (t) {
            var e = null;
            return (
                console.log(t),
                "eassy" === t.type
                    ? ((e = []),
                      sEduT.util.getEl("[data-quiz-answer]", t.container).forEach(function (t) {
                          e.push(t.previousSibling.textContent);
                      }))
                    : (e = t.userValue),
                e.join()
            );
        },
        getCaliperAnswer: function (t) {
            var t = sEduT.util.getEl("[data-quiz-answer]", t.container),
                e = null;
            return (
                0 < t.length &&
                    ((e = []),
                    t.forEach(function (t) {
                        e.push(t.textContent.split("//"));
                    })),
                e.join(" ")
            );
        },
        createSaveInput: function (t) {
            var e;
            0 === sEduT.util.getEl(".quiz--save--data", t).length && ((e = "saveData_P" + sEduT.util.getFileNum() + "-quizID-" + t.dataset.quizId), sEduT.util.createEl("input", { id: e, class: "quiz--save--data hide" }, t));
        },
    }),
    (sEduT.quizFeedBack = (function () {
        var a = sEduT.util,
            i = sEduT.sound;
        return {
            initFeedback: function () {
                var t = a.createEl("div", { class: "feedback--container" }, a.getEl("#wrap"));
                a.createEl("div", { class: "feed--img" }, t);
            },
            playFeedback: function (t) {
                var e = a.getEl(".feedback--container")[0];
                switch ((a.addCls(e, "show--feedback"), a.addCls(e, "grade_" + sEduT.isDataGrade), t)) {
                    case !0:
                        a.addCls(e, "correct"), i.playAudio("correct");
                        break;
                    case !1:
                        a.addCls(e, "incorrect"), i.playAudio("incorrect");
                        break;
                    case "again":
                        a.addCls(e, "again"), i.playAudio("incorrect");
                        break;
                    case "empty":
                        a.addCls(e, "empty"), i.playAudio("empty");
                }
                setTimeout(function () {
                    a.removeCls(e, "show--feedback correct incorrect again empty");
                }, 2e3);
            },
        };
    })()),
    (sEduT.quizDtBook = (function () {
        var d = sEduT.util,
            c = sEduT.quizData,
            r = sEduT.dragUtil;
        return {
            dtLoadData: function (e) {
                var a,
                    i = c.DATA[e],
                    t = d.getEl("input, textarea", i.container),
                    n = d.getEl(".quiz--save--data", i.container)[0],
                    s = [],
                    o = !1,
                    r = 0,
                    l = setInterval(function () {
                        r++,
                            !parent.ZOOMVALUE && r < 50
                                ? sEduT.isDevMsg && console.log("#D: 디지털교과서 연동 : Zoom Value 확인 중")
                                : (parent.ZOOMVALUE && (sEduT.scaleValue.zoom = parent.ZOOMVALUE),
                                  t.forEach(function (t) {
                                      i.isMergeSave
                                          ? ((a = n.getAttribute("id")),
                                            d.hasCls(i.container, "is--not--rect") ||
                                                (a && (-1 !== s.indexOf(a) && clearInterval(l), n && "" !== n.value && (s.push(a), o || i.isDtLoad || ((i.userValue = JSON.parse(n.value)), (o = !0), sEduT.quizDtBook.dtInitQuiz(e))))))
                                          : (a = t.getAttribute("id")) && (-1 !== s.indexOf(a) && clearInterval(l), (!0 !== t.checked && "" === t.value) || (s.push(a), o || i.isDtLoad || ((o = !0), sEduT.quizDtBook.dtInitQuiz(e))));
                                  }));
                    }, 100);
                setTimeout(function () {
                    clearInterval(l);
                }, 7e3);
            },
            dtInitQuiz: function (t) {
                var i,
                    o = sEduT.quizData.DATA[t];
                switch (o.type) {
                    case "multiple":
                        o.userValue.forEach(function (t, e) {
                            for (var a = 0; a < t.length; a++)
                                (i = t[a]),
                                    o.selectItems[e] &&
                                        o.selectItems[e].forEach(function (t) {
                                            parseInt(t.dataset.multipleNum) === i && d.addCls(t, "select--on");
                                        });
                        });
                        break;
                    case "essay":
                        o.essayItems.forEach(function (t, e) {
                            var a = t.getAttribute("maxlength") || null,
                                t = d.getText(t.value).trim();
                            "1" === a && (t = t.toLowerCase()), (o.userValue[e] = [t]), !o.isExample && o.correctAnswer && 1 < o.correctAnswer[e].length && o.correctAnswer[e].includes(t) && (o.userValue[e] = o.correctAnswer[e]);
                        });
                        break;
                    case "drag":
                        console.log(111111111);
                        !(function () {
                            for (var t = 0; t < o.dragItems.length; t++) {
                                var e = o.userValue[t];
                                if (e && 0 !== e.length) {
                                    if (1 < e.length) for (var a = 0; a < e.length; a++) s(e[a], o.dropItems[t]);
                                    else s(e, o.dropItems[t]);
                                    o.pluralArea || o.pluralDrag || (r.getPluralCorrect(o.userValue, e) === o.correctAnswer[t].length && (d.addCls(o.dragItems[e - 1], "drag--done"), d.addCls(o.dropItems[t], "drop--done")));
                                }
                            }
                            if (o.directCheck && o.pluralArea && o.pluralDrag) {
                                for (var i = 0; i < o.dragItems.length; i++) r.getPluralCorrect(o.userValue, i + 1) === r.getPluralCorrect(o.correctAnswer, i + 1) && d.addCls(o.dragItems[i], "drag--done");
                                for (var n = 0; n < o.dropItems.length; n++) o.userValue[n].length === o.correctAnswer[n].length && d.addCls(o.dropItems[n], "drop--done");
                            }
                            function s(t, e) {
                                t = d.getEl("[data-quiz-pointer='drag'][data-num='" + t + "']", o.container)[0].cloneNode(!0);
                                o.pluralArea || t.classList.add("inline_flex"), t.removeAttribute("data-quiz-pointer"), e.appendChild(t);
                            }
                        })();
                        break;
                    case "draw":
                        !(function () {
                            for (var a = {}, i = {}, t = 0; t < o.userValue.length; t++) {
                                var e = o.userValue[t];
                                if (((a = r.drawAnswerPosition(o.svgContainer, o.endItems[t])), e && 0 !== e.length)) {
                                    if (1 < e.length) for (var n = 0; n < e.length; n++) s(e[n], t);
                                    else s(e, t);
                                    o.pluralArea || (r.getPluralCorrect(o.userValue, e) === o.correctAnswer[t].length && (d.addCls(o.startItems[e - 1], "draw--done"), d.addCls(o.endItems[t], "line--done")));
                                }
                            }
                            function s(t, e) {
                                (i = r.drawAnswerPosition(o.svgContainer, o.startItems[t - 1])), (o.thisLine = r.createLine(o.svgContainer, "user--line", t)), r.drawLine(o.thisLine, a, i, e + 1);
                            }
                        })();
                }
                o.userValue && (o.container.dataset.initBtn || "hide" === o.container.dataset.initBtn || sEduT.quiz.controlBtnHandler(o));
            },
            dtResetQuiz: function (t) {
                "function" == typeof parent.API_ANNOTATION_INPUT_DELETE &&
                    ((t = c.DATA[t]),
                    d.getEl("input, textarea", t.container).forEach(function (t) {
                        var e = t.getAttribute("id");
                        e && ((t.value = ""), (t.checked = !1), parent.API_ANNOTATION_INPUT_DELETE(e));
                    }));
            },
            dtSaveQuizData: function (t) {
                var e = c.DATA[t],
                    a = d.getEl(".quiz--save--data", e.container)[0],
                    t = d.hasCls(e.container, "notSave");
                a && !t && ((a.value = JSON.stringify(e.userValue)), (e.isDtLoad = !0));
            },
            sendCaliperSensor: function (t) {
                var e = c.DATA[t],
                    t = e.container.closest("assessmentItem") || e.container;
                DTCaliperSensor.fire({ correct: e.score, itemObject: t, value: sEduT.quizData.getCaliperAnswer(e), userValue: sEduT.quizData.getCaliperUser(e), description: e.description, pageNumber: parseInt(d.getFileNum()) });
            },
        };
    })()),
    (sEduT.quiz = (function () {
        var u = sEduT.util,
            h = sEduT.quizData,
            m = sEduT.quizFeedBack,
            l = sEduT.quizDtBook,
            d = sEduT.dragUtil,
            s = sEduT.sound;
        return {
            initQuizType: function (t) {
                sEduT.quizData.DEFAULT_OPTION = t;
                t = u.getEl("[data-quiz-type]");
                t.forEach(function (t) {
                    var e = t.dataset.quizId,
                        a = t.dataset.quizType;
                    switch ((h.setData(t), a)) {
                        case "multiple":
                            sEduT.quiz.multipleQuiz(e);
                            break;
                        case "essay":
                            sEduT.quiz.essayQuiz(e);
                            break;
                        case "draw":
                            sEduT.quiz.drawQuiz(e);
                            break;
                        case "drag":
                            sEduT.quiz.dragQuiz(e);
                            break;
                        case "layer":
                            sEduT.quiz.layerQuiz(e);
                    }
                    sEduT.quiz.syncControlBtn(e),
                        setTimeout(function () {
                            sEduT.isDTBOOK && l.dtLoadData(e, a);
                        }, 500);
                }),
                    0 < t.length && (this.initControlBtn(), m.initFeedback());
            },
            multipleQuiz: function (s) {
                var o = h.DATA[s];
                o.quizName.forEach(function (t, e) {
                    (o.selectItems[e] = u.getEl("[data-multiple-num]", t)),
                        u.addEvt(o.selectItems[e], "click", function (t) {
                            u.hasCls(o.container, "quiz--complete") ||
                                (t.preventDefault(),
                                function (t, a) {
                                    var e = o.selectItems[a],
                                        i = parseInt(t.currentTarget.dataset.multipleNum),
                                        n = [];
                                    e.forEach(function (t) {
                                        var e = parseInt(t.dataset.multipleNum);
                                        e === i ? (u.hasCls(t, "select--on") ? u.removeCls(t, "select--on") : u.addCls(t, "select--on")) : o.correctAnswer[a].length < 2 && u.removeCls(t, "select--on"),
                                            u.hasCls(t, "select--on") && n.push(e);
                                    }),
                                        (o.userValue[a] = n),
                                        sEduT.quiz.controlBtnHandler(o),
                                        sEduT.isDTBOOK && l.dtSaveQuizData(s);
                                }.call(this, t, e));
                        });
                });
            },
            essayQuiz: function (t) {
                var i = h.DATA[t];
                i.essayItems.forEach(function (t, e) {
                    var a = t.getAttribute("maxlength") || null;
                    u.addEvt(t, "keyup", function (t) {
                        (t = t.target), (t = u.getText(t.value).trim());
                        "1" === a && (t = t.toLowerCase()),
                            (i.userValue[e] = [t]),
                            !i.isExample && i.correctAnswer && 1 < i.correctAnswer[e].length && i.correctAnswer[e].includes(t) && (i.userValue[e] = i.correctAnswer[e]),
                            sEduT.quiz.controlBtnHandler(i);
                    });
                });
            },
            dragQuiz: function (t) {
                var a = h.DATA[t],
                    e = u.hasCls(a.container, "withInput");
                (a.moveEventHandler = function (t) {

                    console.log(2222222222222);
                    (a.isMoving = !0), u.addCls(a.thisSelect, "this--dragging"), d.getCoord(t, i), u.hasCls(a.container, "card") ? d.setDragPosition2(a.thisSelect, i) : d.setDragPosition(a.thisSelect, i);
                }.bind(this)),
                    (a.removeMoveEventHandler = function (t) {
                        if ((d.getDoneElement(t, a), u.removeCls(a.thisSelect, "this--dragging"), u.removeCls(a.thisSelect, "this--starting"), (i.drag = a.thisSelect.getBoundingClientRect()), null !== a.doneNum)) a.isSuccess = !0;
                        else
                            for (var e = 0; e < a.dropLen; e++)
                                if (!1 === d.dragStickTo(e, i)) {
                                    (a.isSuccess = !0), (a.doneNum = e);
                                    break;
                                }
                        d.isGropName(a),
                            a.isSuccess
                                ? a.correctAnswer
                                    ? (a.doneNum,
                                      d.selectHasDone(a),
                                      a.directCheck
                                          ? ((a.correctPlural = d.getPluralCorrect(a.correctAnswer, a.thisNum)),
                                            !a.isHasValue && a.isHasAnswer
                                                ? (sEduT.isQuizDragSound && s.playAudio("correct"),
                                                  a.dropItems[a.doneNum].appendChild(d.cloneDrag(a, a.thisSelect)),
                                                  a.checkToggle || d.directCheckResult(a),
                                                  a.checkToggle || d.saveSendComplete(a))
                                                : sEduT.isQuizDragSound && s.playAudio("incorrect"))
                                          : ((a.correctPlural = a.correctAnswer[a.doneNum].length),
                                            a.isHasValue
                                                ? sEduT.isQuizDragSound && s.playAudio("dragFalse")
                                                : (u.hasCls(a.dropItems[a.doneNum], "drop--done") &&
                                                      a.isOverlap &&
                                                      (u.removeCls(a.dropItems[a.doneNum], "drop--done"),
                                                      u.removeCls(a.dragItems[a.userValue[a.doneNum] - 1], "drag--done"),
                                                      (a.dropItems[a.doneNum].innerHTML = ""),
                                                      (a.userValue[a.doneNum] = [])),
                                                  !a.isOverlap && u.hasCls(a.dropItems[a.doneNum], "drop--done")
                                                      ? sEduT.isQuizDragSound && s.playAudio("dragFalse")
                                                      : (a.dropItems[a.doneNum].appendChild(d.cloneDrag(a, a.thisSelect)), sEduT.isQuizDragSound && s.playAudio("dragTrue"), d.addClsDone(a), d.saveSendComplete(a)))),
                                      d.resetDragPosition(a.thisSelect),
                                      sEduT.quiz.controlBtnHandler(a))
                                    : u.hasCls(a.container, "free")
                                    ? (a.doneNum, d.saveSendComplete(a), sEduT.quiz.controlBtnHandler(a))
                                    : u.hasCls(a.container, "card")
                                    ? checkNum.indexOf(a.doneNum) < 0
                                        ? (a.dropItems[a.doneNum].appendChild(d.cloneDrag(a, a.thisSelect)), u.addCls(a.thisSelect, "drag--done"), d.resetDragPosition(a.thisSelect), d.saveSendComplete(a), checkNum.push(a.doneNum))
                                        : d.resetDragPosition(a.thisSelect)
                                    : (a.dropItems[a.doneNum].appendChild(d.cloneDrag(a, a.thisSelect)), u.addCls(a.thisSelect, "drag--done"), d.resetDragPosition(a.thisSelect), d.saveSendComplete(a))
                                : (sEduT.isQuizDragSound && a.isMoving && s.playAudio("dragFalse"), a.isMoving && d.resetDragPosition(a.thisSelect));
                        u.removeEvt(window, "move", a.moveEventHandler),
                            u.removeEvt(window, "up", a.removeMoveEventHandler),
                            u.removeEvt(window, "leave", a.removeMoveEventHandler),
                            u.removeEvt(u.getEl("#wrap"), "leave", a.removeMoveEventHandler);
                    }.bind(this));
                var i = {},
                    n = 10;
                d.setPluralValue(a, a.dragItems),
                    u.addEvt(a.dragItems, "down", function (t) {
                        e || (t.preventDefault(), t.stopPropagation()),
                            function (t) {
                                if (((a.isMoving = !1), d.setSelectItems(t, a), u.hasCls(a.thisSelect, "drag--done"))) return;
                                u.addCls(a.thisSelect, "this--starting"), u.hasCls(a.container, "free") && (a.thisSelect.style.zIndex = n++);
                                (i = d.getDragPosition(a.dragArea, a.thisSelect, a.dropItems)),
                                    d.getCoord(t, i),
                                    (i.drag.prevLeft = i.coord.left - i.drag.left),
                                    (i.drag.prevTop = i.coord.top - i.drag.top),
                                    u.addEvt(window, "move", a.moveEventHandler),
                                    u.addEvt(window, "up", a.removeMoveEventHandler),
                                    u.addEvt(window, "leave", a.removeMoveEventHandler),
                                    u.addEvt(u.getEl("#wrap"), "leave", a.removeMoveEventHandler);
                            }.call(this, t),
                            sEduT.view.senseClosePopupEvent(t);
                    });
            },
            deleteItem: function (t) {
                checkNum.splice(t);
            },
            drawQuiz: function (t) {
                var e = h.DATA[t];
                (e.moveEventHandler = function (t) {
                    (e.isMoving = !0), (n = d.drawEndPosition(t, a)), d.drawLine(e.thisLine, i, n);
                }.bind(this)),
                    (e.removeMoveEventHandler = function (t) {
                        d.getDoneElement(t, e), null !== e.doneNum && (e.isSuccess = !0);
                        d.isGropName(e),
                            e.isSuccess
                                ? e.correctAnswer &&
                                  ((n = d.drawEndPosition(t, a, e.doneEl)),
                                  d.drawLine(e.thisLine, i, n, e.doneNum + 1),
                                  e.doneNum,
                                  d.selectHasDone(e),
                                  e.directCheck
                                      ? ((e.correctPlural = d.getPluralCorrect(e.correctAnswer, e.thisNum)),
                                        !e.isHasValue && e.isHasAnswer
                                            ? (sEduT.isQuizDragSound && s.playAudio("correct"), e.checkToggle || d.directCheckResult(e), e.checkToggle || d.saveSendComplete(e))
                                            : (sEduT.isQuizDragSound && s.playAudio("incorrect"), e.svgContainer.removeChild(e.thisLine)))
                                      : ((e.correctPlural = e.correctAnswer[e.doneNum].length),
                                        e.isHasValue
                                            ? (sEduT.isQuizDragSound && s.playAudio("dragFalse"), e.svgContainer.removeChild(e.thisLine))
                                            : (u.hasCls(e.endItems[e.doneNum], "line--done") &&
                                                  (u.removeCls(e.endItems[e.doneNum], "line--done"),
                                                  u.removeCls(e.startItems[e.userValue[e.doneNum] - 1], "draw--done"),
                                                  (e.oldLine = u.getEl("[data-start-num='" + e.userValue[e.doneNum] + "']", e.svgContainer)[0]),
                                                  e.svgContainer.removeChild(e.oldLine),
                                                  (e.userValue[e.doneNum] = [])),
                                              sEduT.isQuizDragSound && s.playAudio("dragTrue"),
                                              d.addClsDone(e),
                                              d.saveSendComplete(e))),
                                  sEduT.quiz.controlBtnHandler(e))
                                : (console.log(e.isMoving), sEduT.isQuizDragSound && e.isMoving && s.playAudio("dragFalse"), e.isMoving && e.svgContainer.removeChild(e.thisLine));
                        u.removeEvt(window, "move", e.moveEventHandler), u.removeEvt(window, "up", e.removeMoveEventHandler), u.removeEvt(window, "leave", e.removeMoveEventHandler);
                    }.bind(this));
                var a = {},
                    i = {},
                    n = {};
                d.setPluralValue(e, e.startItems),
                    u.addEvt(e.startItems, "down", function (t) {
                        t.preventDefault(),
                            t.stopPropagation(),
                            function (t) {
                                if (((e.isMoving = !1), d.setSelectItems(t, e), u.hasCls(e.thisSelect, "draw--done"))) return;
                                (a = d.getDrawPosition(e.svgContainer, e.thisSelect)),
                                    (i = d.drawStartPosition(a)),
                                    (e.thisLine = d.createLine(e.svgContainer, "user--line", e.thisNum)),
                                    u.addEvt(window, "move", e.moveEventHandler),
                                    u.addEvt(window, "up", e.removeMoveEventHandler),
                                    u.addEvt(window, "leave", e.removeMoveEventHandler);
                            }.call(this, t),
                            sEduT.view.senseClosePopupEvent(t);
                    }),
                    setTimeout(function () {
                        u.isInDisplay(e.container) || u.addCls(e.container, "is--not--rect");
                    }, 200);
            },
            layerQuiz: function (t) {
                var i = h.DATA[t],
                    n = u.hasCls(i.container, "free");
                (i.layerPopupParent = i.layerPopup.parentNode),
                    i.layerSelect.forEach(function (t, e) {
                        u.addEvt(t, "click", function (t) {
                            u.hasCls(i.container, "quiz--complete") ||
                                ((i.selectIdx = e),
                                u.removeCls(i.layerPopup, "select--open"),
                                (t = t.currentTarget),
                                (i.layerPopup.dataset.selectNum = i.selectIdx),
                                u.addCls(i.layerPopup, "select--open select--animate"),
                                setTimeout(function () {
                                    u.removeCls(i.layerPopup, "select--animate");
                                }, 500),
                                (i.selectPosition = t.getBoundingClientRect()),
                                (i.popupSize = i.layerPopup.getBoundingClientRect()),
                                (i.layerPopupParentPos = i.layerPopupParent.getBoundingClientRect()),
                                (i.layerPopupPosLeft = t.getBoundingClientRect().left - i.layerPopupParentPos.left - i.popupSize.width / 2 + i.selectPosition.width / 2),
                                (i.layerPopupPosTop = t.getBoundingClientRect().top + i.selectPosition.height - i.layerPopupParentPos.top),
                                (i.layerPopup.style.left = i.layerPopupPosLeft / sEduT.scaleValue.zoom + "px"),
                                (i.layerPopup.style.top = i.layerPopupPosTop / sEduT.scaleValue.zoom + "px"));
                        });
                    }),
                    i.layerOption.forEach(function (t, e) {
                        u.addEvt(t, "click", function (t) {
                            var a;
                            u.hasCls(i.container, "quiz--complete") ||
                                ((t = t.currentTarget),
                                (a = e),
                                i.userValue.forEach(function (t, e) {
                                    t[0] !== a + 1 || n || ((i.layerSelect[e].value = ""), (t.length = 0));
                                }),
                                (i.layerSelect[i.selectIdx].value = t.dataset.returnText || t.textContent),
                                (i.userValue[i.selectIdx] = [a + 1]),
                                u.removeCls(i.layerPopup, "select--open"),
                                sEduT.quiz.controlBtnHandler(i),
                                sEduT.complete && sEduT.complete.layerComplete && sEduT.complete.layerComplete(i.container, t, i.layerSelect[i.selectIdx]));
                        });
                    });
            },
            checkQuiz: function (t) {
                var e = h.DATA[t];
                !e.totalCheckBtn && e.isEmptyCheck && u.getText(JSON.stringify(e.userValue)).length < 1
                    ? m.playFeedback("empty")
                    : (JSON.stringify(e.userValue) === JSON.stringify(e.correctAnswer) ? (e.score = !0) : (e.score = !1),
                      !e.score && e.chance < e.totalChance - 1
                          ? (sEduT.isDTBOOK && e.isSendCaliperSensor && l.sendCaliperSensor(t),
                            e.chance++,
                            (e.userValue = h.resetUserValue(e.userValue)),
                            e.isHint && u.addCls(u.getEl("[data-quiz-feed='hint']", e.container), "hint--show"),
                            e.isFeedback && m.playFeedback("again"),
                            this.resetQuizElement(t))
                          : (!e.score && e.chance !== e.totalChance - 1) ||
                            (this.resultQuiz(t),
                            e.isMarking && ((t = u.getEl("[data-quiz-marking=" + e.qid + "]")[0]), !0 === e.score ? u.addCls(t, "marking--correct") : u.addCls(t, "marking--incorrect")),
                            !e.totalCheckBtn && e.isFeedback && m.playFeedback(e.score)));
            },
            totalCheck: function (t, e) {
                for (var a, i, n = !1, s = !0, o = 0, r = u.getEl(t), l = u.getEl("[data-quiz-type]", r), d = l.length, c = 0; c < d; c++)
                    if ((a = h.DATA[l[c].dataset.quizId]).isEmptyCheck && 0 === u.getText(JSON.stringify(a.userValue)).length) return void m.playFeedback("empty");
                for (c = 0; c < d; c++) (a = h.DATA[l[c].dataset.quizId]), sEduT.quiz.checkQuiz(a.qid), a.score ? o++ : (s = !1), a.isFeedback && (n = !0);
                (i = Math.round((o / d) * 100)), (t = u.getEl("[quiz-score-num]", r)[0]) && t.childNodes[0] && ((t.childNodes[0].textContent = i), (t.dataset.scoreNum = i)), u.addCls(r, "total--complete"), n && m.playFeedback(s);
            },
            resultQuiz: function (t, e, a) {
                var i,
                    r = h.DATA[t];
                if (e && u.hasCls(e, "on"))
                    return (
                        u.removeCls(e, "on"),
                        void (
                            "essay" === r.type &&
                            r.isExample &&
                            (0 < r.example.length &&
                                r.example.forEach(function (t) {
                                    u.removeCls(t, "example--show");
                                }),
                            r.essayItems.forEach(function (t) {
                                u.removeCls(t, "disabled");
                            }))
                        )
                    );
                switch (r.type) {
                    case "multiple":
                        r.correctAnswer.forEach(function (t, e) {
                            for (var a = 0; a < t.length; a++) (i = t[a] - 1), u.addCls(r.selectItems[e][i], "select--answer");
                        });
                        break;
                    case "essay":
                        r.isExample
                            ? 0 < r.example.length &&
                              r.example.forEach(function (t) {
                                  u.hasCls(t, "toast") || u.addCls(t, "example--show");
                              })
                            : (r.essayItems.forEach(function (t, e) {
                                  u.addCls(t, "disabled"), JSON.stringify(r.correctAnswer[e]) === JSON.stringify(r.userValue[e]) ? u.addCls(t, "input--correct") : u.addCls(t, "input--incorrect");
                              }),
                              u.getEl("[data-quiz-answer]", r.container).forEach(function (t) {
                                  t.textContent = t.textContent.replace("//", " 또는 ");
                              }));
                        break;
                    case "drag":
                        r.dropItems.forEach(function (t, e) {
                            u.addCls(t, "drop--done"), (t.innerHTML = ""), JSON.stringify(r.correctAnswer[e]) === JSON.stringify(r.userValue[e]) ? u.addCls(t, "drag--correct") : u.addCls(t, "drag--incorrect");
                        }),
                            r.correctAnswer.forEach(function (t, e) {
                                0 < t.length && t.length < 2
                                    ? n(t[0], r.dropItems[e])
                                    : 1 < t.length &&
                                      t.forEach(function (t) {
                                          n(t, r.dropItems[e]);
                                      }),
                                    u.removeCls(u.getEl(".drag--done", r.dropItems[e]), "drag--done");
                            }),
                            u.addCls(r.dragItems, "drag--done");
                        break;
                    case "draw":
                        !(function () {
                            var t = u.getEl(".user--line", r.svgContainer),
                                i = {},
                                n = {};
                            r.checkToggle ? u.addCls(r.endItems, "disabled") : u.addCls(r.endItems, "line--done");
                            for (var e = 0; e < r.correctAnswer.length; e++) {
                                var a = r.correctAnswer[e];
                                if (((i = d.drawAnswerPosition(r.svgContainer, r.endItems[e])), a && 0 !== a.length)) {
                                    if (1 < a.length) for (var s = 0; s < a.length; s++) o(a[s], r.userValue[e][s], e);
                                    else o(a, r.userValue[e], e);
                                    r.checkToggle ? u.addCls(r.startItems[e], "disabled") : u.addCls(r.startItems[e], "draw--done");
                                }
                            }
                            function o(t, e, a) {
                                (!r.checkToggle && JSON.stringify(t) === JSON.stringify(e)) ||
                                    ((n = d.drawAnswerPosition(r.svgContainer, r.startItems[t - 1])), (r.thisLine = d.createLine(r.svgContainer, "answer--line", t)), d.drawLine(r.thisLine, i, n, a + 1));
                            }
                            t.forEach(function (t) {
                                var e = parseInt(t.dataset.startNum),
                                    a = parseInt(t.dataset.endNum);
                                r.correctAnswer[a - 1].includes(e) || u.addCls(t, "line--hide"), r.checkToggle && u.addCls(t, "line--hide");
                            });
                        })();
                        break;
                    case "layer":
                        r.layerSelect.forEach(function (t, e) {
                            e = r.correctAnswer[e];
                            (u.createEl("span", { class: "layer--answer" }, t.parentNode).innerHTML = r.layerOption[e - 1].dataset.returnText || r.layerOption[e - 1].textContent), u.addCls(t, "layer--done");
                        }),
                            u.removeCls(r.layerPopup, "select--open");
                }
                function n(t, e) {
                    t = u.getEl("[data-quiz-pointer='drag'][data-num='" + t + "']", r.container)[0].cloneNode(!0);
                    r.pluralArea || t.classList.add("inline_flex"), t.removeAttribute("data-quiz-pointer"), e.appendChild(t);
                }
                u.getEl("[data-quiz-answer]", r.container).forEach(function (t) {
                    "show" === t.dataset.quizAnswer && u.addCls(t, "answer--show");
                }),
                    r.isHint && u.removeCls(u.getEl("[data-quiz-feed='hint']", r.container), "hint--show"),
                    u.addCls(r.container, "quiz--complete"),
                    this.syncControlBtn(t, "result"),
                    sEduT.complete && sEduT.complete.quizResult(r.container),
                    (r.isResult = !0),
                    sEduT.isDTBOOK && r.isSendCaliperSensor && l.sendCaliperSensor(t);
            },
            resetQuiz: function (t) {
                var e = h.DATA[t];
                h.resetUserData(t), this.resetQuizElement(t), this.resetQuizData(e), sEduT.isDTBOOK && l.dtResetQuiz(t);
            },
            resetQuizData: function (t, e) {
                var a = t.qid;
                this.syncControlBtn(a, "replay"),
                    !e && h.DEFAULT_OPTION && (t.controlShowHide = !0),
                    this.syncControlBtn(a),
                    t.isMarking && u.removeCls(u.getEl("[data-quiz-marking=" + t.qid + "]"), "marking--correct marking--incorrect"),
                    t.isExample &&
                        0 < t.example.length &&
                        t.example.forEach(function (t) {
                            u.removeCls(t, "example--show pop--open");
                        }),
                    u.removeCls(u.getEl("[data-quiz-answer]", t.container), "answer--show"),
                    u.removeCls(t.container, "quiz--complete"),
                    sEduT.complete && sEduT.complete.quizReset(t.container),
                    (t.chance = 0),
                    (t.isResult = !1);
            },
            resetQuizElement: function (t) {
                var e = h.DATA[t];
                switch (e.type) {
                    case "multiple":
                        e.selectItems.forEach(function (t) {
                            for (var e = 0; e < t.length; e++) u.removeCls(t[e], "select--on select--answer");
                        });
                        break;
                    case "essay":
                        e.essayItems.forEach(function (t) {
                            u.removeCls(t, "disabled input--correct input--incorrect"), (t.value = "");
                        });
                        break;
                    case "drag":
                        u.hasCls(e.container, "free")
                            ? e.dragItems.forEach(function (t) {
                                  (t.style.top = null), (t.style.left = null), (t.style.right = null), (t.style.bottom = null);
                              })
                            : (u.removeCls(e.dragItems, "drag--done"),
                              u.removeCls(e.dropItems, "drop--done"),
                              e.dropItems.forEach(function (t) {
                                  t.innerHTML = "";
                              }));
                        break;
                    case "draw":
                        u.removeCls(e.startItems, "draw--done disabled"),
                            u.removeCls(e.endItems, "line--done disabled"),
                            u.getEl("line", e.svgContainer).forEach(function (t) {
                                (u.hasCls(t, "user--line") || u.hasCls(t, "answer--line")) && e.svgContainer.removeChild(t);
                            });
                        break;
                    case "layer":
                        e.layerSelect.forEach(function (t) {
                            t.value = "";
                            var e = u.getEl(".layer--answer", t.parentNode)[0];
                            e && t.parentNode.removeChild(e), u.removeCls(t, "layer--done");
                        }),
                            u.removeCls(e.layerPopup, "select--open");
                }
            },
            resultToggle: function (t) {
                var e = h.DATA[t];
                if (e.checkToggle)
                    switch ((this.resetQuizData(e, !0), e.type)) {
                        case "multiple":
                        case "essay":
                        case "drag":
                            break;
                        case "draw":
                            u.getEl("line", e.svgContainer).forEach(function (t) {
                                u.hasCls(t, "answer--line") && e.svgContainer.removeChild(t), u.removeCls(t, "line--hide");
                            }),
                                u.removeCls(e.startItems, "disabled"),
                                u.removeCls(e.endItems, "disabled");
                    }
            },
            initControlBtn: function () {
                u.getEl("[data-quiz-btn]").forEach(function (e) {
                    var a,
                        i = e.dataset.quizTarget,
                        n = e.dataset.quizBtn;
                    u.addEvt(e, "click", function (t) {
                        switch (n) {
                            case "check":
                                u.hasCls(this, "on") ? sEduT.quiz.resultToggle(i) : sEduT.quiz.checkQuiz(i);
                                break;
                            case "answer":
                                u.hasCls(this, "on") ? sEduT.quiz.resultToggle(i) : sEduT.quiz.resultQuiz(i, this);
                                break;
                            case "replay":
                                sEduT.quiz.resetQuiz(i);
                                break;
                            case "all--check":
                                u.hasCls(this, "on") || sEduT.quiz.totalCheck(i, t);
                                break;
                            case "all--answer":
                                (a = u.getEl(i)),
                                    u.hasCls(this, "on") ||
                                        (u.getEl("[data-quiz-type]", a).forEach(function (t) {
                                            sEduT.quiz.resultQuiz(t.dataset.quizId);
                                        }),
                                        u.addCls(this, "on")),
                                    u.addCls(a, "total--complete");
                                break;
                            case "all--replay":
                                (a = u.getEl(i)),
                                    u.getEl("[data-quiz-type]", a).forEach(function (t) {
                                        sEduT.quiz.resetQuiz(t.dataset.quizId);
                                    }),
                                    u.removeCls(a, "total--complete");
                        }
                    }),
                        ("all--check" !== n && "all--answer" !== n && "all--replay" !== n) ||
                            u.getEl("[data-quiz-type]", u.getEl(i)).forEach(function (t) {
                                t = h.DATA[t.dataset.quizId];
                                t.totalCheckBtn || (t.totalCheckBtn = e.dataset.quizTarget);
                            });
                });
            },
            controlBtnHandler: function (t) {
                t.controlShowHide && ((t.controlShowHide = !1), sEduT.quiz.syncControlBtn(t.qid));
            },
            syncControlBtn: function (t, e) {
                var a,
                    i = h.DATA[t],
                    n = i.controlBtns,
                    s = n.length,
                    o = sEduT.util.hasCls(i.container, "activityCard");
                if ((i.totalCheckBtn && (a = document.querySelectorAll("[data-quiz-target='" + i.totalCheckBtn + "']")), e))
                    "result" === e && 0 < s
                        ? (n.forEach(function (t) {
                              t.dataset.quizBtn && (o || (u.addCls(t, "on"), i.checkToggle || "replay" === t.dataset.quizBtn || u.addCls(t, "disabled")));
                          }),
                          u.addCls(a, "on"))
                        : "replay" === e &&
                          0 < s &&
                          (n.forEach(function (t) {
                              t.dataset.quizBtn && u.removeCls(t, "on disabled");
                          }),
                          u.removeCls(a, "on"));
                else {
                    i.controlShowHide && 0 < s ? u.removeCls(n, "btn--show") : u.addCls(n, "btn--show"), i.totalCheckBtn && (i.controlShowHide ? u.removeCls(a, "btn--show") : u.addCls(a, "btn--show"));
                    for (var r = 0; r < n.length; r++) i.isFeedback && 0 < s && ("check" === n[r].dataset.quizBtn || "all--check" === n[r].dataset.quizBtn) && u.addCls(n[r], "disabled");
                }
            },
        };
    })()),
    (sEduT.view = (function () {
        var c,
            u = sEduT.util,
            a = sEduT.ui,
            o = sEduT.sound,
            h = { slide: [], tab: [], scroll: [], zoom: [], checklist: [] },
            m = function (t) {
                var e,
                    a = !1,
                    i = !1,
                    n = !1;
                t && (e = (t.composedPath && t.composedPath()) || t.path),
                    e &&
                        e.forEach(function (t) {
                            return (
                                t.dataset && t.dataset.popup && (i = t),
                                t.dataset && t.dataset.layoutType && "popup" === t.dataset.layoutType
                                    ? ((a = !0),
                                      void u.getEl("[data-popup]", t).forEach(function (t) {
                                          u.hasCls(t, "on") &&
                                              ((n = t),
                                              e.forEach(function (t) {
                                                  t.classList && t.classList.contains("toast") && (n = !1);
                                              }));
                                      }))
                                    : void (t.classList && 0 < t.classList.length && (t.classList.contains("pop--open") ? (a = !0) : t.classList.contains("btn")))
                            );
                        });
                !1 !== n && (u.removeEvt(u.getEl("#wrap"), "click", m, { capture: !0 }), n.click());
                a ||
                    (u.removeEvt(u.getEl("#wrap"), "click", m, { capture: !0 }),
                    sEduT.isPopupDisableEvent
                        ? (sEduT.view.closePopup(t), t.stopPropagation())
                        : i
                        ? u.hasCls(i, "on")
                            ? (c[0] && sEduT.view.closePopup(c[0], c[1], c[2]), t.stopPropagation())
                            : sEduT.view.closePopup(t)
                        : (sEduT.view.closePopup(t), sEduT.sound.playAudio("click")));
            }.bind(this);
        return {
            toastOutHandler: m,
            initViewType: function () {
                u.getEl("[data-layout-type]").forEach(function (t) {
                    switch (t.dataset.layoutType) {
                        case "slide":
                            sEduT.view.initSlide(t);
                            break;
                        case "tab":
                            sEduT.view.initTab(t);
                            break;
                        case "scroll":
                            sEduT.view.initScroll(t);
                    }
                });
            },
            initSlide: function (t) {
                var e,
                    a,
                    i,
                    n = h.slide,
                    s = n.length,
                    o = {
                        slideId: "slide-" + u.isNum(s + 1),
                        container: t,
                        slideList: u.getEl("[data-slide-list]", t),
                        btnPrev: u.getEl("[data-slide-btn='prev']", t),
                        btnNext: u.getEl("[data-slide-btn='next']", t),
                        btnDotted: u.getEl("[data-slide-dot]", t),
                        thisNum: 0,
                    };
                if (((o.slideListLen = o.slideList.length), t.dataset.slideDot && "true" === t.dataset.slideDot && 0 === u.getEl(".move--slider", t).length)) {
                    for (var r = u.createEl("div", { class: "move--slider" }, t), l = 0; l < o.slideListLen; l++) u.createEl("div", { class: "btn slide dot", "data-slide-dot": String(l) }, r);
                    o.btnDotted = u.getEl("[data-slide-dot]", t);
                }
                t.dataset.slideNum &&
                    "true" === t.dataset.slideNum &&
                    0 === u.getEl(".slide--num", t).length &&
                    ((i = u.createEl("div", { class: "slide--num" }, t)),
                    (a = u.createEl("div", { class: "slide num current" }, i)),
                    (i = u.createEl("div", { class: "slide num total" }, i)),
                    (a.innerText = 1),
                    (i.innerText = o.slideListLen),
                    (o.currentNum = a),
                    (o.totalNum = i)),
                    n.push(o),
                    (e = n[s]),
                    (t.dataset.slideId = e.slideId),
                    sEduT.view.moveSlide(e, 0),
                    u.addEvt(e.btnPrev, "click", function (t) {
                        sEduT.view.moveSlide(e, t);
                    }),
                    u.addEvt(e.btnNext, "click", function (t) {
                        sEduT.view.moveSlide(e, t);
                    }),
                    u.addEvt(e.btnDotted, "click", function (t) {
                        sEduT.view.moveSlide(e, t);
                    });
            },
            moveSlide: function (e, t) {
                var a, i, n, s;
                if (!e.slideId)
                    for (a = e.dataset.slideId, i = h.slide, n = 0; n < i.length; n++)
                        if (i[n].slideId === a) {
                            e = i[n];
                            break;
                        }
                "number" == typeof t
                    ? (e.thisNum = t)
                    : (s = t.currentTarget).dataset.slideBtn
                    ? ("prev" === s.dataset.slideBtn && --e.thisNum, "next" === s.dataset.slideBtn && (e.thisNum += 1))
                    : s.dataset.slideDot && (e.thisNum = s.dataset.slideDot),
                    e.thisNum < 1
                        ? ((e.thisNum = 0), u.removeCls(e.btnPrev, "btn--show"), u.addCls(e.btnNext, "btn--show"))
                        : e.thisNum >= e.slideListLen - 1
                        ? ((e.thisNum = e.slideListLen - 1), u.addCls(e.btnPrev, "btn--show"), u.removeCls(e.btnNext, "btn--show"))
                        : (u.addCls(e.btnPrev, "btn--show"), u.addCls(e.btnNext, "btn--show")),
                    (s = e.slideList[e.thisNum]),
                    u.removeCls(e.slideList, "slide--show"),
                    u.addCls(s, "slide--show"),
                    e.btnDotted.forEach(function (t) {
                        t.dataset.slideDot == e.thisNum ? u.addCls(t, "on") : u.removeCls(t, "on");
                    }),
                    e.currentNum && (e.currentNum.innerText = e.thisNum + 1),
                    sEduT.view.viewUpdate(s),
                    sEduT.complete && sEduT.complete.slide(s);
            },
            initTab: function (t) {
                var e,
                    a = h.tab,
                    i = a.length,
                    n = { tabId: "tab-" + u.isNum(i + 1), container: t, tabNav: u.getEl("[data-tab-nav]", t), tabList: u.getEl("[data-tab-list]", t), thisTab: 0 };
                (n.tabLen = n.tabNav.length),
                    a.push(n),
                    (e = a[i]),
                    (t.dataset.tabId = e.tabId),
                    u.addCls(t, "default"),
                    sEduT.view.moveTab(e, 0),
                    u.addEvt(e.tabNav, "click", function (t) {
                        sEduT.view.moveTab(e, t.currentTarget.dataset.tabNav);
                    });
            },
            moveTab: function (t, e) {
                var a, i, n;
                if (!t.tabId)
                    for (a = t.dataset.tabId, i = h.tab, n = 0; n < i.length; n++)
                        if (i[n].tabId === a) {
                            t = i[n];
                            break;
                        }
                (t.thisTab = e),
                    (t.currNav = u.getEl("[data-tab-nav='" + e + "']", t.container)),
                    (t.currList = u.getEl("[data-tab-list='" + e + "']", t.container)),
                    e && u.removeCls(t.container, "default"),
                    u.removeCls(t.tabNav, "on"),
                    u.removeCls(t.tabList, "tab--show"),
                    u.addCls(t.currNav, "on"),
                    u.addCls(t.currList, "tab--show"),
                    sEduT.view.viewUpdate(t.currList),
                    sEduT.complete && sEduT.complete.tab(t.currList);
            },
            initScroll: function (t) {
                function e(t) {
                    (this.container = t),
                        (this.content = u.getEl(".scroll--content", t)[0]),
                        (this.containerHeight = parseInt(u.getStyle(t).height) || 0),
                        (this.barTop = 0),
                        (this.barLeft = 0),
                        (this.scrollValue = 0),
                        (this.scrollFlow = "vertical"),
                        u.hasCls(t, "horizontal") && (this.scrollFlow = "horizontal"),
                        Object.defineProperties(this, {
                            containerSize: {
                                get: function () {
                                    return this.content.getBoundingClientRect();
                                },
                            },
                            containerTop: {
                                get: function () {
                                    return this.containerSize.top;
                                },
                            },
                            containerLeft: {
                                get: function () {
                                    return this.containerSize.left;
                                },
                            },
                            contentHeight: {
                                get: function () {
                                    return this.containerSize.height;
                                },
                            },
                            contentWidth: {
                                get: function () {
                                    return this.containerSize.width;
                                },
                            },
                            barSize: {
                                get: function () {
                                    return this.barHandler.getBoundingClientRect();
                                },
                            },
                            barHeight: {
                                get: function () {
                                    return (this.barSize.bottom - this.barSize.top) / 2;
                                },
                            },
                            barWidth: {
                                get: function () {
                                    return (this.barSize.right - this.barSize.left) / 2;
                                },
                            },
                            heightRate: {
                                get: function () {
                                    return (this.contentHeight - 2 * this.barHeight) / sEduT.scaleValue.zoom;
                                },
                            },
                            widthRate: {
                                get: function () {
                                    return (this.contentWidth - 2 * this.barWidth) / sEduT.scaleValue.zoom;
                                },
                            },
                            barHightRate: {
                                get: function () {
                                    return (this.barTop + this.barHeight) / (this.contentHeight - this.barHeight);
                                },
                            },
                            barWidthRate: {
                                get: function () {
                                    return (this.barLeft + this.barWidth) / (this.contentWidth - this.barWidth);
                                },
                            },
                            scrollHeight: {
                                get: function () {
                                    return this.content.scrollHeight * sEduT.scaleValue.zoom;
                                },
                            },
                            scrollWidth: {
                                get: function () {
                                    return this.content.scrollWidth * sEduT.scaleValue.zoom;
                                },
                            },
                            containerHeightRate: {
                                get: function () {
                                    return this.content.scrollTop / ((this.scrollHeight - this.contentHeight) / sEduT.scaleValue.zoom);
                                },
                            },
                            containerWidthRate: {
                                get: function () {
                                    return this.content.scrollLeft / ((this.scrollWidth - this.contentWidth) / sEduT.scaleValue.zoom);
                                },
                            },
                            coord: {
                                get: function () {
                                    return this.coordX, this.coordY;
                                },
                                set: function (t) {
                                    (this.coordX = (t.touches ? t.touches[0] : t).clientX), (this.coordY = (t.touches ? t.touches[0] : t).clientY);
                                },
                            },
                        });
                }
                e.prototype = {
                    init: function () {
                        this.create(), this.addEvt();
                    },
                    create: function () {
                        return (
                            (this.barContainer = u.createEl("div", { class: "scroll--bar" }, this.container)),
                            (this.barRail = u.createEl("div", { class: "scroll--rail" }, this.barContainer)),
                            (this.barHandler = u.createEl("div", { class: "scroll--handle" }, this.barContainer)),
                            u.addCls(this.barContainer, this.scrollFlow),
                            this
                        );
                    },
                    addEvt: function () {
                        var t = this;
                        u.addEvt(this.barRail, "down", this.startDrag.bind(this)),
                            u.addEvt(this.barHandler, "down", this.dragBarHandle.bind(this)),
                            u.addEvt(this.barHandler, "up", function () {
                                u.removeCls(t.barHandler, "scroll--dragging");
                            }),
                            u.addEvt(this.content, "scroll", this.scrollHandle.bind(this));
                    },
                    dragBarHandle: function (t) {
                        var e = this,
                            a = e.startDrag.bind(this);
                        t.preventDefault(),
                            u.addEvt(window, "move", a),
                            u.addEvt(window, "up", function () {
                                u.removeEvt(window, "move", a), u.removeCls(e.barHandler, "scroll--dragging");
                            });
                    },
                    startDrag: function (t) {
                        (this.coord = t),
                            "vertical" === this.scrollFlow
                                ? ((this.barTop = (this.coordY - this.containerTop - this.barHeight) / sEduT.scaleValue.zoom),
                                  (this.barTop = this.barTop <= 0 ? 0 : this.barTop >= this.heightRate ? this.heightRate : this.barTop),
                                  (this.scrollValue = (this.scrollHeight - this.contentHeight) * (this.barTop <= 0.1 ? 0 : this.barHightRate)),
                                  (this.barHandler.style.top = this.barTop + "px"),
                                  (this.content.scrollTop = parseFloat(this.scrollValue).toFixed(2)))
                                : "horizontal" === this.scrollFlow &&
                                  ((this.barLeft = (this.coordX - this.containerLeft - this.barWidth) / sEduT.scaleValue.zoom),
                                  (this.barLeft = this.barLeft <= 0 ? 0 : this.barLeft >= this.widthRate ? this.widthRate : this.barLeft),
                                  (this.scrollValue = (this.scrollWidth - this.contentWidth) * (this.barLeft <= 0.1 ? 0 : this.barWidthRate)),
                                  (this.barHandler.style.left = this.barLeft + "px"),
                                  (this.content.scrollLeft = parseFloat(this.scrollValue).toFixed(2))),
                            u.addCls(this.barHandler, "scroll--dragging"),
                            u.isTouch || t.preventDefault();
                    },
                    scrollHandle: function () {
                        u.hasCls(this.barHandler, "scroll--dragging") ||
                            ("vertical" === this.scrollFlow
                                ? ((this.barTop = this.heightRate * this.containerHeightRate), (this.barHandler.style.top = this.barTop + "px"))
                                : "horizontal" === this.scrollFlow && ((this.barLeft = this.widthRate * this.containerWidthRate), (this.barHandler.style.left = this.barLeft + "px")));
                    },
                };
                var a = h.scroll,
                    i = a.length;
                (a[i] = new e(t)), a[i].init();
            },
            initPopup: function () {
                u.addEvt(u.getEl("[data-popup]"), "click", function (t) {
                    sEduT.view.openPopup(t);
                }),
                    u.addEvt(u.getEl("[data-popup-btn='close']"), "click", function (t) {
                        sEduT.view.closePopup(t);
                    }),
                    u.addEvt(u.getEl("[data-msg]"), "click", function (t) {
                        sEduT.view.openMsg(t);
                    });
            },
            openPopup: function (t) {
                var e,
                    a,
                    i,
                    n,
                    s,
                    o = t.currentTarget,
                    r = o.dataset.popup,
                    l = o.dataset.slideIdx;
                function d() {
                    u.addCls(o, "on"), u.addCls(e, "pop--open"), u.addCls(document.body, "isOnPopup");
                }
                r.includes("#")
                    ? (e = u.getEl(r))
                    : "inner" === r
                    ? ((e = u.getEl("[data-layout-type='popup']", o)[0]).dataset.isToast = !0)
                    : "next" === r
                    ? o.nextElementSibling && (a = o.nextElementSibling)
                    : "prev" === o && o.previousElementSibling && (a = o.previousElementSibling),
                    a && "popup" === a.dataset.layoutType && ((e = a).dataset.isToast = !0),
                    e &&
                        ((i = !1),
                        o !== t.target &&
                            "inner" === r &&
                            u.hasCls(e, "pop--open") &&
                            (sEduT.isPopupOutSizeClose
                                ? (i = !0)
                                : (t && (n = (t.composedPath && t.composedPath()) || t.path),
                                  n &&
                                      n.forEach(function (t) {
                                          t.dataset && "popup" === t.dataset.layoutType && (i = !0);
                                      }))),
                        i ||
                            (e.dataset.isToast
                                ? u.hasCls(e, "pop--open")
                                    ? sEduT.view.closePopup(t, e, o)
                                    : ("true" === e.dataset.overlay || e.closest(".popup--container") || sEduT.view.closePopup(), d(), sEduT.view.setPopupPosition(e, o), sEduT.view.setTailPosition(e, o))
                                : (sEduT.view.closePopup(), d(), (n = e.parentNode), u.addCls(n, "active"), u.hasCls(e, "word") && sEduT.view.setPopupPosition(e, o)),
                            l &&
                                ((s = u.getEl("[data-layout-type='slide']", e)[0]),
                                h.slide.forEach(function (t) {
                                    t.slideId === s.dataset.slideId && sEduT.view.moveSlide(t, Number(l));
                                })),
                            sEduT.isPopupOutSizeClose && !e.dataset.outClose && (t.stopPropagation(), u.addEvt(u.getEl("#wrap"), "click", m, { capture: !0 })),
                            sEduT.isPopupDisableEvent || (c = [t, e, o]),
                            sEduT.view.viewUpdate(e, "disabled"),
                            sEduT.complete && sEduT.complete.openPopup(e, o)));
            },
            closePopup: function (t, e, a) {
                var i,
                    n = null,
                    s = !1;
                u.hasCls(document.body, "isOnPopup") &&
                    (e && "string" == typeof e && e.includes("#")
                        ? ((i = u.getEl(e)), (n = u.getEl("[data-popup='" + e.replace("#", "") + "']")))
                        : e && "object" === _typeof(e)
                        ? ((i = e), t.stopPropagation())
                        : t && t.currentTarget.dataset && "close" === t.currentTarget.dataset.popupBtn
                        ? ((i = t.currentTarget.closest("[data-layout-type='popup']")), a && (n = a), t.stopPropagation())
                        : (i = u.getEl("[data-layout-type='popup']")),
                    i.dataset && i.dataset.isToast && (s = !0),
                    u.removeCls(i, "pop--open"),
                    n || u.removeCls(u.getEl("[data-popup]"), "on"),
                    u.removeCls(n, "on"),
                    o.stopAllSound(),
                    o.playAudio("click"),
                    s || (u.removeCls(document.body, "isOnPopup"), u.removeCls(u.getEl(".popup--container"), "active"), m && u.removeEvt(u.getEl("#wrap"), "click", m, { capture: !0 }), sEduT.isPopupDisableEvent || (c = [])),
                    sEduT.complete && sEduT.complete.closeAllPopup(a));
            },
            senseClosePopupEvent: function (t) {
                sEduT.isPopupOutSizeClose && u.hasCls(document.body, "isOnPopup") && !t.currentTarget.closest("[data-layout-type='popup']") && sEduT.view.closePopup();
            },
            setPopupPosition: function (t, e) {
                var a, i, n, s;
                t.dataset.isPositon ||
                    (u.hasCls(t, "toast")
                        ? ((a = e.getBoundingClientRect()),
                          (i = u.getEl("#wrap").getBoundingClientRect()).width / 3 < a.left ? u.addCls(t, "right") : (i.width / 3) * 2 > a.left ? u.addCls(t, "left") : u.addCls(t, "center"),
                          (t.dataset.isPositon = !0))
                        : u.hasCls(t, "word") &&
                          ((a = e.getBoundingClientRect()),
                          (n = t.getBoundingClientRect()),
                          (i = u.getEl("#wrap").getBoundingClientRect()).height - 100 < a.top + n.height
                              ? (t.style.top = (a.top - n.height) / sEduT.scaleValue.zoom + "px")
                              : (t.style.top = (a.top + a.height) / sEduT.scaleValue.zoom + "px"),
                          (t.dataset.isPositon = !0),
                          this.setTailPosition(t, e),
                          (s = setInterval(function () {
                              u.getEl(".tail", t)[0].dataset.tailX ? clearInterval(s) : this.setTailPosition(t, e);
                          }, 200)),
                          setTimeout(function () {
                              clearInterval(s);
                          }, 7e3)));
            },
            setTailPosition: function (t, e) {
                var a,
                    i = u.getEl(".tail", t)[0];
                i.dataset.tailX ||
                    (i &&
                        ((a = e.getBoundingClientRect()),
                        (e = t.getBoundingClientRect()),
                        (t = i.getBoundingClientRect()),
                        (t = (a.left - e.left + a.width / 2 - t.width / 2) / sEduT.scaleValue.zoom || t.left),
                        (i.dataset.tailX = t),
                        (i.style.left = t + "px")));
            },
            openMsg: function (t) {
                var t = "#" + t.currentTarget.dataset.popup,
                    e = u.getEl(t);
                u.addCls(e, "msg--open"),
                    setTimeout(function () {
                        u.removeCls(e, "msg--open");
                    }, 2e3);
            },
            initPageMove: function () {
                u.addEvt(u.getEl("[data-prev-page]"), "click", function (t) {
                    u.hasCls(t.currentTarget, "disabled") || sEduT.view.pageMove(t);
                }),
                    u.addEvt(u.getEl("[data-next-page]"), "click", function (t) {
                        u.hasCls(t.currentTarget, "disabled") || sEduT.view.pageMove(t);
                    }),
                    u.addEvt(u.getEl("[data-move-page]"), "click", function (t) {
                        var e;
                        sEduT.isDTBOOK ? ((e = t.currentTarget.dataset.movePage), u.hasCls(t.currentTarget, "disabled") || parent.GO_PAGE_LOAD(e)) : u.hasCls(t.currentTarget, "disabled") || sEduT.view.pageMove(t);
                    });
            },
            pageMove: function (t) {
                var e = "",
                    e = "string" == typeof t ? t : t.target.dataset.movePage;
                setTimeout(function () {
                    location.href = e;
                }, 200);
            },
            initCheckList: function () {
                var e,
                    t = u.getEl("[data-func-check]"),
                    a = h.checklist,
                    i = a.length;
                t.forEach(function (t) {
                    0 === (e = { checkId: "cheklist-" + u.isNum(i + 1), container: t, checklist: u.getEl("[data-check-list]", t), type: t.dataset.funcCheck, replayBtn: u.getEl("[data-check-replay]", t) }).replayBtn.length &&
                        (e.replayBtn = u.getEl("[data-check-replay='" + t.getAttribute("id") + "']")),
                        (e.length = e.checklist.length),
                        a.push(e),
                        (i = a.length),
                        (t.dataset.checkId = e.checkId);
                }),
                    a.forEach(function (e) {
                        u.addEvt(e.checklist, "click", function (t) {
                            sEduT.view.isCheckList(e, t);
                        });
                    }),
                    u.addEvt(u.getEl("[data-check-replay]"), "click", function (t) {
                        sEduT.view.resetCheckList(t);
                    }),
                    sEduT.isDTBOOK && this.loadCheckData();
            },
            isCheckList: function (t, e) {
                var a,
                    i,
                    n,
                    s = e.currentTarget,
                    e = s.dataset.checkList.split("-") || "";
                switch (t.type) {
                    case "checkbox":
                        u.hasCls(s, "check--on") ? u.removeCls(s, "check--on") : u.addCls(s, "check--on");
                        break;
                    case "sum":
                        if (u.hasCls(s, "check--on")) {
                            if (((i = !1), s.dataset.checkGroup))
                                for (a = s.dataset.checkGroup, n = 0; n < t.length; n++) t.checklist[n] === s && (i = !0), i && t.checklist[n].dataset.checkGroup === a && u.removeCls(t.checklist[n], "check--on");
                            else for (n = 0; n < t.length; n++) t.checklist[n] === s && (i = !0), i && u.removeCls(t.checklist[n], "check--on");
                            u.addCls(s, "check--on");
                        } else if (s.dataset.checkGroup) for (a = s.dataset.checkGroup, n = 0; n < t.length && (t.checklist[n].dataset.checkGroup === a && u.addCls(t.checklist[n], "check--on"), t.checklist[n] !== s); n++);
                        else for (n = 0; n < t.length && (u.addCls(t.checklist[n], "check--on"), t.checklist[n] !== s); n++);
                        break;
                    default:
                        u.removeCls(t.checklist, "check--on"), u.addCls(s, "check--on");
                }
                u.hasCls(s, "toggle") && ("true" === e[1] ? ((e[1] = !1), (s.dataset.checkList = e[0] + "-false")) : "false" === e[1] && ((e[1] = !0), (s.dataset.checkList = e[0] + "-true"))),
                    t.checklist.forEach(function (t) {
                        u.hasCls(t, "check--on") ? (u.getEl(".check--input", t)[0].checked = !0) : (u.getEl(".check--input", t)[0].checked = !1);
                    }),
                    u.addCls(t.replayBtn, "btn--show"),
                    sEduT.complete && sEduT.complete.checkList(s, e);
            },
            resetCheckList: function (t) {
                var e = t.currentTarget,
                    t = e.dataset.checkReplay,
                    t = t ? u.getEl("#" + t) : e.closest("[data-func-check]");
                u.getEl("[data-check-list]", t).forEach(function (t) {
                    u.removeCls(t, "check--on"),
                        u.getEl("input", t).forEach(function (t) {
                            (t.checked = !1), sEduT.isDTBOOK && (t.id && (t.checked = !1), "function" == typeof parent.API_ANNOTATION_INPUT_DELETE && t.id && parent.API_ANNOTATION_INPUT_DELETE(t.id));
                        });
                    var e = t.dataset.checkList.split("-");
                    1 < e.length && u.hasCls(t, "toggle") && "true" === e[1] && ((e[1] = !1), (t.dataset.checkList = e[0] + "-false"));
                }),
                    t.dataset.mergeCheck || u.removeCls(e, "btn--show");
            },
            loadCheckData: function () {
                var a,
                    t = u.getEl("[data-check-list] .check--input"),
                    i = [],
                    n = !1,
                    s = setInterval(function () {
                        return n
                            ? (u.getEl("[data-func-check]").forEach(function (t) {
                                  var e = u.getEl("[data-check-replay='" + t.getAttribute("id") + "']");
                                  0 === e.length && u.getEl("[data-check-replay]", t), u.addCls(e, "btn--show");
                              }),
                              void clearInterval(s))
                            : void t.forEach(function (t) {
                                  var e;
                                  (a = t.getAttribute("id")) && (-1 !== i.indexOf(a) && clearInterval(s), !0 === t.checked && (i.push(a), (n = !0), (e = t.closest("[data-check-list]")), !0 === t.checked && u.addCls(e, "check--on")));
                              });
                    }, 200);
                setTimeout(function () {
                    clearInterval(s);
                }, 7e3);
            },
            initShowHide: function () {
                var t = u.getEl("[data-func-show]"),
                    e = u.getEl("[data-show-all]");
                t.forEach(function (e) {
                    var a,
                        i,
                        n,
                        t = u.getEl("[data-show-idx]", e);
                    "all" === e.dataset.funcShow && u.addCls(t, "disabled"),
                        u.addEvt(t, "click", function (t) {
                            switch (((a = t.currentTarget), sEduT.sound.stopAllSound(), (i = u.getEl("[data-show-idx='" + a.dataset.showIdx + "']", e)), (n = u.getEl("[data-show-obj='" + a.dataset.showIdx + "']", e)), e.dataset.funcShow)) {
                                case "toggle":
                                    u.hasCls(a, "on") ? (u.removeCls(n, "obj--show"), u.removeCls(i, "on")) : (u.addCls(n, "obj--show"), u.addCls(i, "on"));
                                    break;
                                case "one":
                                    u.removeCls(u.getEl("[data-show-obj]", e), "obj--show"), u.removeCls(u.getEl("[data-show-idx]", e), "on disabled"), u.addCls(n, "obj--show"), u.addCls(a, "on disabled");
                                    break;
                                case "all":
                                    return;
                                case "show":
                                default:
                                    u.addCls(n, "obj--show"), u.addCls(a, "on disabled");
                            }
                            sEduT.complete && sEduT.complete.showHide(a), "one" !== e.dataset.funcShow && sEduT.view.showHideComplete(e);
                        });
                }),
                    u.addEvt(e, "click", function (t) {
                        var e = t.currentTarget,
                            t = e.closest("[data-func-show]") || u.getEl("#" + this.dataset.showAll);
                        u.hasCls(e, "replay") ? sEduT.view.showHideReplay(t, this) : sEduT.view.showHideComplete(t, this);
                    });
            },
            showHideComplete: function (t, e) {
                var a,
                    i,
                    n = u.getEl("[data-show-idx]", t),
                    s = n.length,
                    o = 0;
                if ((e && "object" !== _typeof(e) && ((i = e), (e = null)), i)) "result" === i ? r() : "replay" === i && l();
                else if (e) u.hasCls(e, "replay") ? (u.removeCls(e, "on"), u.hasCls(e, "toggle") && u.removeCls(e, "replay"), l()) : (u.addCls(e, "on"), u.hasCls(e, "toggle") && u.addCls(e, "replay"), r());
                else for (0 === (e = u.getEl("[data-show-all]", t)).length && (e = u.getEl("[data-show-all='" + t.getAttribute("id") + "']")), a = 0; a < s; a++) u.hasCls(n[a], "on") && o++;
                function r() {
                    for (a = 0; a < s; a++) u.addCls(n[a], "on"), "toggle" !== t.dataset.funcShow && u.addCls(n[a], "disabled"), u.addCls(u.getEl("[data-show-obj='" + n[a].dataset.showIdx + "']", t), "obj--show");
                    o = s;
                }
                function l() {
                    for (a = 0; a < s; a++) u.removeCls(n[a], "on disabled"), u.removeCls(u.getEl("[data-show-obj='" + n[a].dataset.showIdx + "']", t), "obj--show");
                }
                o === s ? (u.addCls(t, "show--complete"), e && u.addCls(e, "on"), sEduT.complete && sEduT.complete.showHide(t)) : (u.removeCls(t, "show--complete"), e && u.removeCls(e, "on"));
            },
            showHideReplay: function (t) {
                for (var e = u.getEl("[data-show-idx]", t), a = e.length, i = 0; i < a; i++) u.removeCls(e[i], "on disabled"), u.removeCls(u.getEl("[data-show-obj='" + e[i].dataset.showIdx + "']", t), "obj--show");
                u.removeCls(t, "show--complete");
                var n = u.getEl("[data-show-all]", t);
                0 === n.length && (n = u.getEl("[data-show-all='" + t.getAttribute("id") + "']")),
                    n &&
                        (u.removeCls(n, "on disabled"),
                        n.forEach(function (t) {
                            u.hasCls(t, "toggle") && u.removeCls(t, "replay");
                        })),
                    sEduT.complete && sEduT.complete.showHide(t);
            },
            initZoom: function (a) {
                var t = u.getEl("[data-view-zoom]");
                function i(t, e, a) {
                    (this.ZOOM_RATE = Number(e.rate) || 20),
                        (this.ZOOM_STEP = Number(e.step) || 4),
                        (this.ZOOM_MAX = Number(this.ZOOM_RATE * this.ZOOM_STEP) + 1),
                        (this.ZOOM_MIN = 1),
                        (this.ZOOM_BORDER = 2 * Number(e.border) || 0),
                        (this.rate = 1),
                        (this.container = t),
                        (this.zoomId = "zoomPlayer-" + u.isNum(a)),
                        (this.zoomImg = u.getEl(".zoom--obj", t)[0]),
                        (this.moveX = this.zoomImg.offsetLeft || 0),
                        (this.moveY = this.zoomImg.offsetTop || 0),
                        (this.zoomControl = "true" === t.dataset.controlZoom || !1),
                        (this.wayControl = "true" === t.dataset.controlWay || !1),
                        (this.wayMove = Number(e.way) || 100),
                        t.dataset.zoomRate && ((this.ZOOM_RATE = Number(t.dataset.zoomRate.split("//")[0])), (this.ZOOM_STEP = Number(t.dataset.zoomRate.split("//")[1])), (this.ZOOM_MAX = Number(this.ZOOM_RATE * this.ZOOM_STEP) + 1)),
                        Object.defineProperties(this, {
                            areaSize: {
                                get: function () {
                                    return this.container.getBoundingClientRect();
                                },
                            },
                            controlHeight: {
                                get: function () {
                                    return (this.control && this.control.getBoundingClientRect().height) || 0;
                                },
                            },
                            barSize: {
                                get: function () {
                                    return this.barContainer.getBoundingClientRect();
                                },
                            },
                            barWidth: {
                                get: function () {
                                    return this.barSize.right - this.barSize.left;
                                },
                            },
                            barRate: {
                                get: function () {
                                    return (this.ZOOM_RATE * this.ZOOM_STEP) / this.barWidth;
                                },
                            },
                            barHandlerX: {
                                get: function () {
                                    return this.coordX - this.barSize.left;
                                },
                            },
                            imgSize: {
                                get: function () {
                                    return this.zoomImg.getBoundingClientRect();
                                },
                            },
                            imgWidth: {
                                get: function () {
                                    return this.imgSize.right - this.imgSize.left;
                                },
                            },
                            imgHeight: {
                                get: function () {
                                    return this.imgSize.bottom - this.imgSize.top;
                                },
                            },
                            limitTop: {
                                get: function () {
                                    return Math.round(Math.abs(this.imgHeight - this.imgHeight / this.rate) / 2) / sEduT.scaleValue.zoom;
                                },
                            },
                            limitLeft: {
                                get: function () {
                                    return Math.round(Math.abs(this.imgWidth - this.imgWidth / this.rate) / 2) / sEduT.scaleValue.zoom;
                                },
                            },
                            limitRight: {
                                get: function () {
                                    return (this.areaSize.width - this.imgWidth) / sEduT.scaleValue.zoom + this.limitLeft;
                                },
                            },
                            limitBottom: {
                                get: function () {
                                    return (this.areaSize.height - this.imgHeight - this.controlHeight) / sEduT.scaleValue.zoom + this.limitTop;
                                },
                            },
                            coord: {
                                get: function () {
                                    return this.coordX, this.coordY;
                                },
                                set: function (t) {
                                    (this.coordX = (t.touches ? t.touches[0] : t).clientX), (this.coordY = (t.touches ? t.touches[0] : t).clientY);
                                },
                            },
                        });
                }
                i.prototype = {
                    init: function () {
                        this.create(), (this.container.dataset.zoomPlayerId = this.zoomId), this.addEvt(), this.btnShowHide();
                    },
                    create: function () {
                        this.zoomControl &&
                            ((this.control = u.createEl("div", { class: "zoom--control" }, this.container)),
                            (this.zoomInBtn = u.createEl("div", { class: "btn zoom--in", "data-zoom-btn": "in", title: "확대" }, this.control)),
                            (this.zoomOutBtn = u.createEl("div", { class: "btn zoom--out", "data-zoom-btn": "out", title: "축소" }, this.control)),
                            (this.zoomResetBtn = u.createEl("div", { class: "btn zoom--reset", "data-zoom-btn": "reset", title: "초기화" }, this.control)),
                            (this.barContainer = u.createEl("div", { class: "zoom--bar" }, this.container)),
                            (this.barRail = u.createEl("div", { class: "zoom--rail" }, this.barContainer)),
                            (this.barHandler = u.createEl("div", { class: "zoom--handle" }, this.barContainer))),
                            this.wayControl &&
                                ((this.wayBtns = u.createEl("div", { class: "way--control" }, this.container)),
                                (this.wayBtnLeft = u.createEl("div", { class: "btn way--left", "data-way-btn": "left", title: "이동" }, this.wayBtns)),
                                (this.wayBtnRight = u.createEl("div", { class: "btn way--right", "data-way-btn": "right", title: "이동" }, this.wayBtns)),
                                (this.wayBtnTop = u.createEl("div", { class: "btn way--top", "data-way-btn": "top", title: "이동" }, this.wayBtns)),
                                (this.wayBtnBottom = u.createEl("div", { class: "btn way--bottom", "data-way-btn": "bottom", title: "이동" }, this.wayBtns)));
                    },
                    addEvt: function () {
                        u.addEvt(this.zoomOutBtn, "click", this.setZoomOut.bind(this)),
                            u.addEvt(this.zoomInBtn, "click", this.setZoomIn.bind(this)),
                            u.addEvt(this.zoomResetBtn, "click", this.resetZoom.bind(this)),
                            u.addEvt(this.zoomImg, "down", this.dragImgHandle.bind(this)),
                            u.addEvt(this.barContainer, "click", this.clickBarHandle.bind(this)),
                            u.addEvt(this.barHandler, "down", this.dragBarHandle.bind(this)),
                            u.addEvt(this.wayBtnLeft, "click", this.wayHandle.bind(this)),
                            u.addEvt(this.wayBtnRight, "click", this.wayHandle.bind(this)),
                            u.addEvt(this.wayBtnTop, "click", this.wayHandle.bind(this)),
                            u.addEvt(this.wayBtnBottom, "click", this.wayHandle.bind(this));
                    },
                    setZoomOut: function () {
                        this.rate - this.ZOOM_RATE <= this.ZOOM_MIN ? (this.rate = this.ZOOM_MIN) : ((this.rate = this.rate - this.ZOOM_RATE), (this.rate = Number(this.rate.toPrecision(2)))), this.btnHandle();
                    },
                    setZoomIn: function () {
                        this.rate + this.ZOOM_RATE >= this.ZOOM_MAX ? (this.rate = this.ZOOM_MAX) : ((this.rate = this.rate + this.ZOOM_RATE), (this.rate = Number(this.rate.toPrecision(2)))), this.btnHandle();
                    },
                    resetZoom: function () {
                        (this.rate = 1), (this.zoomImg.style.top = null), (this.zoomImg.style.left = null), this.btnHandle();
                    },
                    btnHandle: function () {
                        this.btnShowHide(), this.changeImage(), this.linkageBar(this.getMoveHandler());
                    },
                    getMoveHandler: function () {
                        var t = (this.barWidth / this.ZOOM_STEP) * ((this.rate - 1) / this.ZOOM_RATE);
                        return t > this.barWidth && (t = this.barWidth), Math.round(t);
                    },
                    linkageBar: function (t) {
                        (this.barHandler.style.left = t + "px"), (this.barRail.style.width = t + "px");
                    },
                    btnShowHide: function () {
                        this.rate === this.ZOOM_MIN
                            ? (u.addCls(this.zoomOutBtn, "btn--off"), u.removeCls(this.zoomInBtn, "btn--off"), u.addCls(this.zoomResetBtn, "btn--off"))
                            : (this.rate === this.ZOOM_MAX ? (u.removeCls(this.zoomOutBtn, "btn--off"), u.addCls(this.zoomInBtn, "btn--off")) : (u.removeCls(this.zoomOutBtn, "btn--off"), u.removeCls(this.zoomInBtn, "btn--off")),
                              u.removeCls(this.zoomResetBtn, "btn--off"));
                    },
                    changeImage: function () {
                        (this.zoomImg.style.transform = "scale(" + this.rate + ")"),
                            (this.zoomImg.style.MsTransform = "scale(" + this.rate + ")"),
                            (this.zoomImg.style.MozTransform = "scale(" + this.rate + ")"),
                            (this.zoomImg.style.WebkitTransform = "scale(" + this.rate + ")"),
                            (this.moveX = this.zoomImg.offsetLeft || 0),
                            (this.moveY = this.zoomImg.offsetTop || 0),
                            this.setImgPosition(),
                            sEduT.complete && sEduT.complete.zoom(this);
                    },
                    setImgPosition: function () {
                        var t = this.moveX,
                            e = this.moveY;
                        0 < t && t > this.limitLeft ? (t = this.limitLeft) : t < this.limitRight && (t = this.limitRight),
                            0 < e && e > this.limitTop ? (e = this.limitTop) : e < this.limitBottom && (e = this.limitBottom),
                            1 === this.rate &&
                                (Math.floor(this.areaSize.width) - Math.floor(this.ZOOM_BORDER) - 4 < Math.floor(this.imgSize.width) &&
                                    Math.floor(this.areaSize.width) - Math.floor(this.ZOOM_BORDER) + 4 > Math.floor(this.imgSize.width) &&
                                    (t = 0),
                                Math.floor(this.areaSize.height) - Math.floor(this.ZOOM_BORDER) - 4 < Math.floor(this.imgSize.height) &&
                                    Math.floor(this.areaSize.height) - Math.floor(this.ZOOM_BORDER) + 4 > Math.floor(this.imgSize.height) &&
                                    (e = 0)),
                            (this.zoomImg.style.left = t + "px"),
                            (this.zoomImg.style.top = e + "px");
                    },
                    dragImgHandle: function (t) {
                        var e = this,
                            a = function (t) {
                                (e.coord = t), (e.moveX = e.startPrevX - e.startX + e.coordX), (e.moveY = e.startPrevY - e.startY + e.coordY), e.setImgPosition();
                            }.bind(this);
                        t.preventDefault(),
                            u.addEvt(this.container, "move", a),
                            u.addEvt(this.container, "up", function () {
                                u.removeEvt(e.container, "move", a);
                            }),
                            u.addEvt(this.container, "leave", function () {
                                u.removeEvt(e.container, "move", a);
                            }),
                            (this.coord = t),
                            (this.startX = this.coordX),
                            (this.startY = this.coordY),
                            (this.startPrevX = this.zoomImg.offsetLeft),
                            (this.startPrevY = this.zoomImg.offsetTop),
                            sEduT.view.senseClosePopupEvent(t);
                    },
                    clickBarHandle: function (t) {
                        (this.coord = t), this.moveBarHandle(this.barHandlerX);
                    },
                    dragBarHandle: function (t) {
                        var i = this,
                            e = function (t) {
                                var e = i.barHandlerX,
                                    a = i.barHandler.offsetWidth / 2;
                                (i.coord = t), e < i.barWidth && 0 < e && (e < a ? (e = 0) : e > i.barWidth - a && (e = i.barWidth), i.moveBarHandle(e));
                            }.bind(this);
                        t.preventDefault(),
                            u.addEvt(document, "move", e),
                            u.addEvt(document, "up", function () {
                                u.removeEvt(document, "move", e);
                            }),
                            sEduT.view.senseClosePopupEvent(t);
                    },
                    moveBarHandle: function (t) {
                        (this.rate = t * this.barRate + 1), this.linkageBar(t), this.changeImage();
                    },
                    wayHandle: function (t) {
                        t = t.currentTarget.dataset.wayBtn;
                        switch (((this.startPrevX = this.zoomImg.offsetLeft), (this.startPrevY = this.zoomImg.offsetTop), (this.moveX = this.startPrevX), (this.moveY = this.startPrevY), t)) {
                            case "left":
                                this.moveX = this.startPrevX - this.wayMove;
                                break;
                            case "right":
                                this.moveX = this.startPrevX + this.wayMove;
                                break;
                            case "top":
                                this.moveY = this.startPrevY - this.wayMove;
                                break;
                            case "bottom":
                                this.moveY = this.startPrevY + this.wayMove;
                        }
                        this.setImgPosition();
                    },
                };
                var n = h.zoom;
                t.forEach(function (t, e) {
                    (n[e] = new i(t, a, e + 1)), n[e].init();
                });
            },
            initDownload: function () {
                var e,
                    t = u.getEl("[data-func-down]");
                t.forEach(function (t) {
                    t.dataset.funcTooltip && ((e = u.createEl("span", { class: "tooltip" }, t)).innerHTML = t.dataset.funcTooltip);
                }),
                    u.addEvt(t, "enter", function (t) {
                        (e = u.getEl(".tooltip", t.currentTarget)[0]), u.isTouch || u.addCls(e, "show--tooltip");
                    }),
                    u.addEvt(t, "leave", function (t) {
                        (e = u.getEl(".tooltip", t.currentTarget)[0]), u.isTouch || u.removeCls(e, "show--tooltip");
                    }),
                    u.addEvt(t, "click", function (t) {
                        var e,
                            a = t.currentTarget.dataset.funcDown,
                            i = a.split("/").slice(-1)[0],
                            t = i.split(".")[1];
                        sEduT.isDTBOOK
                            ? parent.GO_OPEN_FILE(a, t)
                            : ((t = u.createEl("a", { href: a, download: i, target: "_blank" })),
                              "ie" === u.getDevice()
                                  ? (((e = new XMLHttpRequest()).onloadstart = function () {
                                        e.responseType = "blob";
                                    }),
                                    (e.onload = function () {
                                        navigator.msSaveOrOpenBlob(e.response, i);
                                    }),
                                    e.open("GET", a, !0),
                                    e.send())
                                  : t.click());
                    });
            },
            viewReset: function (a) {
                var t = u.getEl("[data-func-replay]");
                function e(t) {
                    u.getEl("[data-show-all]", t).forEach(function (t) {
                        var e = t.currentTarget,
                            t = a.closest("[data-func-show]") || u.getEl("#" + this.dataset.showAll);
                        sEduT.view.showHideReplay(t, e);
                    }),
                        u.getEl("[data-check-list]", t).forEach(function (t) {
                            sEduT.view.resetCheckList(t);
                        }),
                        u.getEl("input, textarea", t).forEach(function (t) {
                            u.removeCls(t, "disabled done on"), (t.value = ""), (t.checked = !1);
                        });
                }
                u.addEvt(t, "click", function (t) {
                    e(u.getEl("#" + t.currentTarget.dataset.funcReplay));
                }),
                    a && e(target);
            },
            viewUpdate: function (t, e) {
                e || o.stopAllSound(),
                    t.length || (t = [t]),
                    t.forEach(function (t) {
                        sEduT.isDTBOOK || a.initAssign(t), sEduT.isDTBOOK && sEduT.dragUtil.loadDrawData(t);
                    });
            },
        };
    })()),
    (sEduT.animate = (function () {
        var s = sEduT.util,
            o = {};
        return {
            initAimate: function () {
                s.getEl("[data-func-animate]").forEach(function (t) {
                    sEduT.animate.setAnimateData(t);
                });
            },
            animatePlay: function (t) {
                var e = s.getEl("[data-animate-id='" + t + "']")[0],
                    t = e.dataset.funcAnimate;
                switch ((o[e.dataset.animateId] || sEduT.animate.setAnimateData(e), t)) {
                    case "css":
                        sEduT.animate.cssAnimate(e, "play");
                        break;
                    case "sprite":
                        sEduT.animate.spriteAnimate(e, "play");
                        break;
                    case "png":
                        sEduT.animate.pngAnimatePlay(e, "play");
                        break;
                    case "gif":
                        sEduT.animate.gifAnimate(e, "play");
                }
                sEduT.complete && sEduT.complete.animate(e);
            },
            animateStop: function (t) {
                var e = s.getEl("[data-animate-id='" + t + "']")[0],
                    t = e.dataset.funcAnimate;
                switch ((o[e.dataset.animateId] || sEduT.animate.setAnimateData(e), t)) {
                    case "css":
                        sEduT.animate.cssAnimate(e, "stop");
                        break;
                    case "sprite":
                        sEduT.animate.spriteAnimate(e, "stop");
                        break;
                    case "png":
                        sEduT.animate.pngAnimatePlay(e, "stop");
                        break;
                    case "gif":
                        sEduT.animate.gifAnimate(e, "stop");
                }
            },
            stopAllAnimate: function () {
                s.getEl("[data-animate-id]").forEach(function (t) {
                    sEduT.animate.animateStop(t.dataset.animateId);
                });
            },
            cssAnimate: function (t, e) {
                for (var a = o[t.dataset.animateId], i = 0; i < a.animateLen; i++) s.removeCls(a.animate[i], "animate--playing"), s.addCls(a.animate[i], "animate--hide");
                "play" === e
                    ? ((a.playing = null),
                      (a.playing = setInterval(function () {
                          a.num === a.animateLen && (clearInterval(a.playing), s.addCls(a.container, "animate--complete")),
                              (a.target = a.animate[a.num]),
                              s.addCls(a.target, "animate--playing"),
                              s.removeCls(a.target, "animate--hide"),
                              a.num++;
                      }, a.delay)))
                    : "stop" === e && (s.removeCls(a.container, "animate--complete"), a.playing && clearInterval(a.playing));
            },
            pngAnimatePlay: function (t, e) {
                var a = o[t.dataset.animateId];
                "play" === e
                    ? ((a.num = 1),
                      (a.playing = null),
                      (a.playing = setInterval(function () {
                          a.num === a.endNum && (0 === a.iteration ? (a.num = 1) : 1 === a.iteration ? clearInterval(a.playing) : (a.iteration--, (a.num = 1))),
                              (a.imgEle.src = a.fixSrc + "_" + (a.num < 10 ? "0" + a.num : a.num) + "." + a.fileName),
                              a.num++;
                      }, a.delay)))
                    : "stop" === e && ((a.imgEle.src = a.fixSrc + "_01." + a.fileName), a.playing && clearInterval(a.playing));
            },
            spriteAnimate: function (t, e) {
                var a = o[t.dataset.animateId];
                "play" === e
                    ? ((a.playing = null),
                      (a.playing = setInterval(function () {
                          a.num === a.spriteTotal && (0 === a.iteration ? ((a.num = 1), (a.col = 0), (a.row = 0)) : 1 === a.iteration ? clearInterval(a.playing) : (a.iteration--, (a.num = 1), (a.col = 0), (a.row = 0))),
                              a.row === Math.floor(a.num / a.spriteRowNum) ? a.col++ : (a.row++, (a.col = 0)),
                              (a.imgEle.style.backgroundPositionX = "-" + a.col * a.imgWidth + "px"),
                              (a.imgEle.style.backgroundPositionY = "-" + a.row * a.imgHeight + "px"),
                              a.num++;
                      }, a.delay)))
                    : "stop" === e && ((a.imgEle.style.backgroundPositionX = "0px"), (a.imgEle.style.backgroundPositionY = "0px"), (a.num = 1), (a.col = 0), (a.row = 0), a.playing && clearInterval(a.playing));
            },
            gifAnimate: function (t, e) {
                t = o[t.dataset.animateId];
                "play" === e
                    ? (t.imgEle.src = t.changeSrc.split("?")[0].replace(".png", ".gif") + "?" + s.getRandomNumber(1e4))
                    : "stop" === e && ((t.imgEle.src = t.changeSrc.split("?")[0].replace(".gif", ".png")), t.playing && clearInterval(t.playing));
            },
            setAnimateData: function (t) {
                var e,
                    a = t.dataset.animateId;
                if (!o[a]) {
                    switch (
                        (((e = {}).container = t),
                        (e.animateId = t.dataset.animateId),
                        (e.type = t.dataset.funcAnimate),
                        (e.iteration = Number(t.dataset.animateIteration) || 0),
                        (e.delay = Number(t.dataset.animateDelay) || Number(sEduT.isAnimateSpriteDelay) || 46),
                        t.dataset.funcAnimate)
                    ) {
                        case "css":
                            (e.animate = s.getEl(".animate", t)), (e.animateLen = e.animate.length), (e.delay = Number(t.dataset.animateDelay) || 300), (e.num = 0), e.target;
                            break;
                        case "sprite":
                            (e.imgEle = s.getEl(".animate--sprite", t)[0]),
                                (e.imgWidth = e.imgEle.offsetWidth),
                                (e.imgHeight = e.imgEle.offsetHeight),
                                (e.spriteRowNum = Number(t.dataset.animateSprite.split("//")[0])),
                                (e.spriteColNum = Number(t.dataset.animateSprite.split("//")[1])),
                                (e.spriteEndNum = Number(t.dataset.animateSprite.split("//")[2]) || e.spriteRowNum),
                                (e.spriteTotal = e.spriteRowNum * (e.spriteColNum - 1) + e.spriteEndNum - 1),
                                (e.num = 1),
                                (e.col = 0),
                                (e.row = 0);
                            break;
                        case "png":
                            (e.imgEle = s.getEl(".animate--png", t)[0]),
                                (e.imgFile = e.imgEle.getAttribute("src").split("/").slice(-1)),
                                (e.imgSrc = e.imgEle.getAttribute("src").split(e.imgFile)),
                                (e.fixSrc = e.imgSrc[0] + e.imgFile[0].split("_01.png")[0]),
                                (e.fileName = e.imgFile[0].split(".")[1]),
                                (e.endNum = Number(t.dataset.aimateEndnum)),
                                (e.num = 1);
                            for (var i = s.createEl("div", { class: "image_loading blind" }, t), n = 1; n <= e.endNum; n++) s.createEl("img", { src: e.fixSrc + "_" + (n < 10 ? "0" + n : n) + "." + e.fileName }, i);
                            break;
                        case "gif":
                            (e.imgEle = s.getEl(".animate--gif", t)[0]),
                                (e.imgFile = e.imgEle.getAttribute("src").split("/").slice(-1)),
                                (e.imgSrc = e.imgEle.getAttribute("src").split(e.imgFile)),
                                (e.changeSrc = e.imgSrc[0] + e.imgFile[0]);
                    }
                    o[a] = e;
                }
            },
        };
    })()),
    (function (C) {
        C.fn.moveRuler = function (g) {
            console.log('start');
            var f,
                v = sEduT.util,
                E = C(this)[0],
                e = C(this),
                a = C(this).find(".rotate")[0],
                i = C(this).find(".rotate")[1],
                T = C(".moveRuler").index(this),
                n = 0,
                s = 0;
            e.children(".ruler").css("transform", "rotate(-7deg)");
            var o = parseInt(e.children(".ruler")[0].style.cssText.split("rotate(")[1].split("deg)")[0]);
            (g = { magnetic: !0, orgItem: [], curItem: [], itembox: [], contain: [] }),
                C(this).find(">div").css({ position: "absolute", zIndex: "10" }),
                C(this).off("click"),
                C(this).find(">div.ruler").css("zIndex", "20"),
                C(this)
                    .find(".ruler")
                    .each(function (t, e) {
                        g.orgItem.push(C(e).position()), g.curItem.push(C(e).position());
                    }),
                C(this)
                    .find(".reuler_container")
                    .each(function (t, e) {
                        g.contain.push(C(e).position());
                    }),
                C(window).resize(function () {
                    f = sEduT.scaleValue.zoom;
                });
            function b(t) {
                r("move", t, C(this)), t.preventDefault(), t.stopPropagation();
            }
            var r = function (t, s, e) {
                var a,
                    i,
                    n,
                    o,
                    r = s.pageX || s.changedTouches[0].pageX,
                    l = s.pageY || s.changedTouches[0].pageY;
                switch (((r -= e.offset().left), (l -= e.offset().top), t)) {
                    case "start":
                        console.log('start');
                        C(s.target).hasClass("reuler_container") && (g.idx = -1),
                            E.addEventListener(v.getEvt("move"), b, !1),
                            C.each(g.curItem, function (t, e) {
                                var a, i, n;
                                C(s.target).is(".ruler") || !C(s.target).is(".ruler") ? (g.target = s.target) : (g.target = void 0),
                                    (a = e),
                                    (i = r),
                                    (n = l),
                                    (e = C((e = s).target)),
                                    i > a.left && i < a.left + e.width() && n > a.top && n < a.top + e.height() && (g.idx = t);
                            });
                        break;
                    case "move":
                        console.log('move');
                        C(g.target).is(".ruler") &&
                            ((a = g.target),
                            (i = r),
                            (n = l),
                            "ani" === o
                                ? C(a)
                                      .stop()
                                      .animate({ left: (i - C(a).width() / 2) / f, top: (n - C(a).height() / 2) / f }, 100)
                                : C(a)
                                      .stop()
                                      .css({ left: (i - C(a).width() / 2) / f, top: (n - C(a).height() / 2) / f }, 500),
                            (a = g.target),
                            (g.itembox[0] = C(a).position().left / f),
                            (g.itembox[1] = C(a).position().top / f));
                        break;
                    case "end":
                        for (var d = e.find(".reuler_container"), c = 0; c < d.length; c++) {
                            var u = d[c],
                                h = C(u).position().left / f,
                                m = C(u).position().top / f;
                            0;
                            for (var p = 0; p < g.curItem.length && (h != g.curItem[p].left || m != g.curItem[p].top); p++);
                        }
                        0, C(".drganswer").eq(T).show(), 0;
                }
            };
            C(window).trigger("resize"),
                E.addEventListener(
                    v.getEvt("down"),
                    function (t) {
                        r("start", t, C(this)), a.addEventListener(v.getEvt("move"), l), i.addEventListener(v.getEvt("move"), d), (n = t.clientY || t.changedTouches[0].clientY), t.preventDefault(), t.stopPropagation();
                    },
                    !1
                ),
                E.addEventListener(
                    v.getEvt("up"),
                    function (t) {
                        (o = parseInt(e.children(".ruler")[0].style.cssText.split("rotate(")[1].split("deg)")[0])),
                            E.removeEventListener(v.getEvt("move"), b, !1),
                            a.removeEventListener(v.getEvt("move"), l, !1),
                            i.removeEventListener(v.getEvt("move"), d, !1),
                            e.children(".ruler").css("transform", "rotate(" + o + "deg)"),
                            r("end", t, C(this)),
                            t.preventDefault(),
                            t.stopPropagation();
                    },
                    !1
                ),
                C(".rulerReset").on("click", function () {
                    C.each(g.orgItem, function (t, e) {
                        (g.curItem[t].left = g.orgItem[t].left), (g.curItem[t].top = g.orgItem[t].top), C(E).find(".ruler").eq(t).css({ left: g.orgItem[t].left, top: g.orgItem[t].top });
                    });
                });
            var l = function (t) {
                    (s = parseInt(n - t.clientY)),
                        v.isMobile() && (s = parseInt(n - t.changedTouches[0].clientY)),
                        e
                            .children(".ruler")
                            .stop()
                            .css({ transformOrigin: "center", transform: "rotate(" + 0.9 * (o + s) + "deg)" });
                },
                d = function (t) {
                    (s = parseInt(t.clientY - n)),
                        v.isMobile() && (s = parseInt(t.changedTouches[0].clientY - n)),
                        e
                            .children(".ruler")
                            .stop()
                            .css({ transformOrigin: "center", transform: "rotate(" + 0.9 * (o + s) + "deg)" });
                };
        };
    })(jQuery);
